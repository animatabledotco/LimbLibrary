{  "shapes": {    "matchName": "ADBE Root Vectors Group",    "type": "INDEXED_GROUP",    "properties": [      {        "matchName": "ADBE Vector Group",        "name": "Limb",        "type": "NAMED_GROUP",        "properties": [          {            "matchName": "ADBE Vectors Group",            "name": "Contents",            "type": "INDEXED_GROUP",            "properties": [              {                "matchName": "ADBE Vector Group",                "name": "Upper Group",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vectors Group",                    "name": "Contents",                    "type": "INDEXED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Group",                        "name": "Distal Upper",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Taper Path",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "const thisProp = thisProperty;\r        // Limber Taper\r        function midPoint(p1, p2, per) {\r            return [p1[0] + (p2[0] - p1[0]) * per, p1[1] + (p2[1] - p1[1]) * per];\r        }\r        function tangentsAbsolute(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.add(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function tangentsRelative(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.sub(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function flipX(point) {\r            return [-point[0], point[1]];\r        }\r        function flipY(point) {\r            return [point[0], -point[1]];\r        }\r        function flipXY(point) {\r            return [-point[0], -point[1]];\r        }\r        function flipArrayY(vertices, flipPoint) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                vertices[i] = [vertices[i][0], flipPoint * 2 - vertices[i][1]];\r            }\r            return vertices;\r        }\r        function pointAlongY(val, p1, p2) {\r            const linearValue = thisLayer.linear(val, p1[1], p2[1], p1[0], p2[0]);\r            return [linearValue, val];\r        }\r        function xOnCircleGivenY(x, r) {\r            return Math.sqrt(r * r - x * x);\r        }\r        const semiFac = 0.5522847498307933;\r        const quad = 0.5 * Math.PI;\r        const groupName = thisProp.propertyGroup(3).name;\r        const isUpper = groupName.split(' ')[1] === 'Upper';\r        const isProximal = groupName.split(' ')[0] === 'Proximal';\r        const endctrl = thisComp.layer('{{ end }}');\r        const lowerSplitValue = thisLayer.effect('Foot with Toes')('Lower Split').value * 0.01;\r        const upperSplitValue = thisLayer.effect('Foot with Toes')('Upper Split').value * 0.01;\r        const lowerRoundingValue = thisLayer.effect('Foot with Toes')('Lower Rounding').value * 0.01;\r        const upperRoundingValue = thisLayer.effect('Foot with Toes')('Upper Rounding').value * 0.01;\r        const sides = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('ikfkfreekanglessides').transform.position;\r        const widthScale = endctrl.effect('Pseudo/skl_main_04')('Width Scale').value * 0.01;\r        const scaleFactor = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('scaleFactor').transform.scale[0];\r        const s1 = thisLayer.effect('Foot with Toes')('Start Width').value * widthScale * scaleFactor;\r        const s3 = thisLayer.effect('Foot with Toes')('End Width').value * widthScale * scaleFactor;\r        const s2 = thisLayer.effect('Foot with Toes')('Middle Width').value * widthScale * scaleFactor;\r\t\tlet c1, c2, dist;\r        if (isUpper) {\r            c2 = s2;\r            c1 = s1;\r            dist = sides[1];\r        }\r        else {\r            c1 = s2;\r            c2 = s3;\r            dist = sides[0];\r        }\r        const distrad = c2 * 0.5;\r        const proxrad = c1 * 0.5;\r        let pers = -lowerRoundingValue;\r        let splitY = isProximal ? lowerSplitValue : 1 - lowerSplitValue;\r        if (isUpper) {\r            pers = -upperRoundingValue;\r            splitY = isProximal ? upperSplitValue : 1 - upperSplitValue;\r        }\r        splitY = -dist * splitY - 0.5;\r        const rad1 = Math.round((isProximal ? proxrad : distrad) * 100000) / 100000;\r        const rad2 = Math.round((isProximal ? distrad : proxrad) * 100000) / 100000;\r        const A = Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r        const r3a = [rad2 * Math.sin(A), -(dist - rad2 * Math.cos(A))];\r        const r3b = [rad1 * Math.sin(A), rad1 * Math.cos(A)];\r        const semiVerts = [\r            [rad1, 0],\r            [0, rad1],\r            [-rad1, 0],\r        ];\r        const semiIns = tangentsAbsolute(semiVerts, [\r            [0, 0],\r            [rad1 * semiFac, 0],\r            [0, rad1 * semiFac],\r        ]);\r        const semiOuts = tangentsAbsolute(semiVerts, [\r            [0, rad1 * semiFac],\r            [-rad1 * semiFac, 0],\r            [0, 0],\r        ]);\r\t\tlet newVerts, newIns, newOuts, state, newA, newT,nq0, nq1, nq2, nr0, nr1, ns0, t, q0, q1, q2, r0, r1, s0, v4, v6, uq0, uq1, uq2, ur0, ur1, us0, upA, upT;\r        if (rad2 < rad1) {\r            if (splitY > r3b[1]) {\r                state = 1;\r                newA = -Math.atan2(splitY, xOnCircleGivenY(splitY, rad1));\r                newT = newA / quad;\r                nq0 = midPoint(semiVerts[0], semiOuts[0], newT);\r                nq1 = midPoint(semiOuts[0], semiIns[1], newT);\r                nq2 = midPoint(semiIns[1], semiVerts[1], newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[0], semiVerts[1], semiVerts[2], flipXY(ns0), [0, splitY], flipY(ns0), flipY(ns0)];\r                newIns = tangentsRelative(newVerts, [\r                    flipY(nq0),\r                    semiVerts[0],\r                    semiIns[1],\r                    semiIns[2],\r                    flipXY(nr0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(ns0),\r                ]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiVerts[0],\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(nq0),\r                    flipXY(ns0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(nr0),\r                ]);\r            }\r            else {\r                state = 2;\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                v4 = flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[1], semiVerts[2], flipXY(s0), v4, [0, splitY], v6, flipY(s0)];\r                newIns = tangentsRelative(newVerts, [flipY(q0), semiIns[1], semiIns[2], flipXY(r0), v4, [0, splitY], v6, flipY(s0)]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(q0),\r                    flipXY(s0),\r                    v4,\r                    [0, splitY],\r                    v6,\r                    flipY(r0),\r                ]);\r            }\r        }\r        else {\r            if (splitY < r3a[1]) {\r                state = 3;\r                const UpsemiVerts = [\r                    [rad2, -dist],\r                    [0, -(dist - rad2)],\r                    [-rad2, -dist],\r                ];\r                const UpsemiIns = tangentsAbsolute(UpsemiVerts, [\r                    [0, 0],\r                    [rad2 * semiFac, 0],\r                    [0, rad2 * semiFac],\r                ]);\r                const UpsemiOuts = tangentsAbsolute(UpsemiVerts, [\r                    [0, rad2 * semiFac],\r                    [-rad2 * semiFac, 0],\r                    [0, 0],\r                ]);\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                if (rad2 == rad1) {\r                    upA = 0.00001;\r                }\r                else {\r                    upA = quad - Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r                }\r                upT = upA / quad;\r                uq0 = midPoint(UpsemiVerts[0], UpsemiOuts[0], upT);\r                uq1 = midPoint(UpsemiOuts[0], UpsemiIns[1], upT);\r                uq2 = midPoint(UpsemiIns[1], UpsemiVerts[1], upT);\r                ur0 = midPoint(uq0, uq1, upT);\r                ur1 = midPoint(uq1, uq2, upT);\r                us0 = midPoint(ur0, ur1, upT);\r                newA = -Math.atan2(-dist - splitY, xOnCircleGivenY(-dist - splitY, rad2));\r                newT = newA / upA;\r                nq0 = midPoint(UpsemiVerts[0], uq0, newT);\r                nq1 = midPoint(uq0, ur0, newT);\r                nq2 = midPoint(ur0, us0, newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                newVerts = [s0, semiVerts[1], flipX(s0), flipX(r3a), flipX(ns0), [0, splitY], ns0, us0];\r                newIns = tangentsRelative(newVerts, [s0, q2, flipX(r1), flipX(r3a), flipX(nr1), [0, splitY], ns0, us0]);\r                newOuts = tangentsRelative(newVerts, [r1, flipX(q2), flipX(r0), flipX(nq2), flipX(ns0), [0, splitY], nr1, r3a]);\r            }\r            else {\r                state = 4;\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, s0);\r                v4 = flipX(v6);\r                newVerts = [s0, s0, semiVerts[1], flipX(s0), v4, [0, splitY], v6, v6];\r                newIns = tangentsRelative(newVerts, [s0, s0, q2, flipX(r1), v4, [0, splitY], v6, v6]);\r                newOuts = tangentsRelative(newVerts, [s0, r1, flipX(q2), flipX(r0), v4, [0, splitY], v6, r0]);\r            }\r        }\r        if (isProximal != true) {\r            const tempVerts = newVerts;\r            const tempIns = newIns;\r            const tempOuts = newOuts;\r            newVerts = flipArrayY(tempVerts, -dist * 0.5).reverse();\r            newIns = flipArrayY(tempOuts, 0).reverse();\r            newOuts = flipArrayY(tempIns, 0).reverse();\r        }\r        if (pers != 0) {\r\t\t\tlet pVert, newVertAdd;\r\t\t\tif (isProximal) {\r\t\t\t\tpVert = 5;\r\t\t\t\tnewVertAdd = [0, newVerts[pVert + 1][0] * pers];\r\t\t\t} else {\r\t\t\t\tpVert = 2;\r\t\t\t\tnewVertAdd = [0, -newVerts[pVert + 1][0] * pers];\r\t\t\t}\t\t\t\r            newVerts[pVert] = thisLayer.add(newVerts[pVert], newVertAdd);\r            newIns[pVert] = [-newVerts[pVert + 1][0] * semiFac, 0];\r            newOuts[pVert] = [newVerts[pVert + 1][0] * semiFac, 0];\r            const B = isProximal ? Math.PI * 0.5 - A : -(Math.PI * 0.5 + A);\r            const temp6 = newVerts[pVert + 1][0] * semiFac * pers;\r            newIns[pVert + 1][0] = -temp6 * Math.sin(B);\r            newIns[pVert + 1][1] = temp6 * Math.cos(B);\r            const temp4 = newVerts[pVert + 1][0] * semiFac * pers;\r            newOuts[pVert - 1][0] = -temp4 * Math.sin(-B);\r            newOuts[pVert - 1][1] = temp4 * Math.cos(-B);\r        }\r        createPath(newVerts, newIns, newOuts, true);",                                    "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0.01353454589844,-0.52418518066406],[0,0],[0,0],[0,0],[0,0],[0,0.52743530273438],[-33.1367645263672,0],[0,-33.1367645263672]],\"outTangents\":[[0,0],[0,0],[0,0],[0,0],[-0.01353454589844,-0.52418518066406],[0,-33.1367645263672],[33.1367645263672,0],[0,0.52743530273438]],\"vertices\":[[59.9790802001953,-198.420608520508],[56.7548217773438,-69.4993286132812],[0,-69.4993286132812],[-56.7548217773438,-69.4993286132812],[-59.9790802001953,-198.420608520508],[-59.9994201660156,-199.998077392578],[0,-259.997497558594],[59.9994201660156,-199.998077392578]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Foot with Toes')('Middle Color');",                                    "value": "[0.4190948009491,0.68833327293396,0.7643535733223,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      },                      {                        "matchName": "ADBE Vector Group",                        "name": "Proximal Upper",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Taper Path",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape Direction",                                    "name": "Shape Direction",                                    "type": "PROPERTY",                                    "enabled": true,                                    "value": "2"                                  },                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "const thisProp = thisProperty;\r        // Limber Taper\r        function midPoint(p1, p2, per) {\r            return [p1[0] + (p2[0] - p1[0]) * per, p1[1] + (p2[1] - p1[1]) * per];\r        }\r        function tangentsAbsolute(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.add(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function tangentsRelative(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.sub(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function flipX(point) {\r            return [-point[0], point[1]];\r        }\r        function flipY(point) {\r            return [point[0], -point[1]];\r        }\r        function flipXY(point) {\r            return [-point[0], -point[1]];\r        }\r        function flipArrayY(vertices, flipPoint) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                vertices[i] = [vertices[i][0], flipPoint * 2 - vertices[i][1]];\r            }\r            return vertices;\r        }\r        function pointAlongY(val, p1, p2) {\r            const linearValue = thisLayer.linear(val, p1[1], p2[1], p1[0], p2[0]);\r            return [linearValue, val];\r        }\r        function xOnCircleGivenY(x, r) {\r            return Math.sqrt(r * r - x * x);\r        }\r        const semiFac = 0.5522847498307933;\r        const quad = 0.5 * Math.PI;\r        const groupName = thisProp.propertyGroup(3).name;\r        const isUpper = groupName.split(' ')[1] === 'Upper';\r        const isProximal = groupName.split(' ')[0] === 'Proximal';\r        const endctrl = thisComp.layer('{{ end }}');\r        const lowerSplitValue = thisLayer.effect('Foot with Toes')('Lower Split').value * 0.01;\r        const upperSplitValue = thisLayer.effect('Foot with Toes')('Upper Split').value * 0.01;\r        const lowerRoundingValue = thisLayer.effect('Foot with Toes')('Lower Rounding').value * 0.01;\r        const upperRoundingValue = thisLayer.effect('Foot with Toes')('Upper Rounding').value * 0.01;\r        const sides = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('ikfkfreekanglessides').transform.position;\r        const widthScale = endctrl.effect('Pseudo/skl_main_04')('Width Scale').value * 0.01;\r        const scaleFactor = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('scaleFactor').transform.scale[0];\r        const s1 = thisLayer.effect('Foot with Toes')('Start Width').value * widthScale * scaleFactor;\r        const s3 = thisLayer.effect('Foot with Toes')('End Width').value * widthScale * scaleFactor;\r        const s2 = thisLayer.effect('Foot with Toes')('Middle Width').value * widthScale * scaleFactor;\r\t\tlet c1, c2, dist;\r        if (isUpper) {\r            c2 = s2;\r            c1 = s1;\r            dist = sides[1];\r        }\r        else {\r            c1 = s2;\r            c2 = s3;\r            dist = sides[0];\r        }\r        const distrad = c2 * 0.5;\r        const proxrad = c1 * 0.5;\r        let pers = -lowerRoundingValue;\r        let splitY = isProximal ? lowerSplitValue : 1 - lowerSplitValue;\r        if (isUpper) {\r            pers = -upperRoundingValue;\r            splitY = isProximal ? upperSplitValue : 1 - upperSplitValue;\r        }\r        splitY = -dist * splitY - 0.5;\r        const rad1 = Math.round((isProximal ? proxrad : distrad) * 100000) / 100000;\r        const rad2 = Math.round((isProximal ? distrad : proxrad) * 100000) / 100000;\r        const A = Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r        const r3a = [rad2 * Math.sin(A), -(dist - rad2 * Math.cos(A))];\r        const r3b = [rad1 * Math.sin(A), rad1 * Math.cos(A)];\r        const semiVerts = [\r            [rad1, 0],\r            [0, rad1],\r            [-rad1, 0],\r        ];\r        const semiIns = tangentsAbsolute(semiVerts, [\r            [0, 0],\r            [rad1 * semiFac, 0],\r            [0, rad1 * semiFac],\r        ]);\r        const semiOuts = tangentsAbsolute(semiVerts, [\r            [0, rad1 * semiFac],\r            [-rad1 * semiFac, 0],\r            [0, 0],\r        ]);\r\t\tlet newVerts, newIns, newOuts, state, newA, newT,nq0, nq1, nq2, nr0, nr1, ns0, t, q0, q1, q2, r0, r1, s0, v4, v6, uq0, uq1, uq2, ur0, ur1, us0, upA, upT;\r        if (rad2 < rad1) {\r            if (splitY > r3b[1]) {\r                state = 1;\r                newA = -Math.atan2(splitY, xOnCircleGivenY(splitY, rad1));\r                newT = newA / quad;\r                nq0 = midPoint(semiVerts[0], semiOuts[0], newT);\r                nq1 = midPoint(semiOuts[0], semiIns[1], newT);\r                nq2 = midPoint(semiIns[1], semiVerts[1], newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[0], semiVerts[1], semiVerts[2], flipXY(ns0), [0, splitY], flipY(ns0), flipY(ns0)];\r                newIns = tangentsRelative(newVerts, [\r                    flipY(nq0),\r                    semiVerts[0],\r                    semiIns[1],\r                    semiIns[2],\r                    flipXY(nr0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(ns0),\r                ]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiVerts[0],\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(nq0),\r                    flipXY(ns0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(nr0),\r                ]);\r            }\r            else {\r                state = 2;\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                v4 = flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[1], semiVerts[2], flipXY(s0), v4, [0, splitY], v6, flipY(s0)];\r                newIns = tangentsRelative(newVerts, [flipY(q0), semiIns[1], semiIns[2], flipXY(r0), v4, [0, splitY], v6, flipY(s0)]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(q0),\r                    flipXY(s0),\r                    v4,\r                    [0, splitY],\r                    v6,\r                    flipY(r0),\r                ]);\r            }\r        }\r        else {\r            if (splitY < r3a[1]) {\r                state = 3;\r                const UpsemiVerts = [\r                    [rad2, -dist],\r                    [0, -(dist - rad2)],\r                    [-rad2, -dist],\r                ];\r                const UpsemiIns = tangentsAbsolute(UpsemiVerts, [\r                    [0, 0],\r                    [rad2 * semiFac, 0],\r                    [0, rad2 * semiFac],\r                ]);\r                const UpsemiOuts = tangentsAbsolute(UpsemiVerts, [\r                    [0, rad2 * semiFac],\r                    [-rad2 * semiFac, 0],\r                    [0, 0],\r                ]);\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                if (rad2 == rad1) {\r                    upA = 0.00001;\r                }\r                else {\r                    upA = quad - Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r                }\r                upT = upA / quad;\r                uq0 = midPoint(UpsemiVerts[0], UpsemiOuts[0], upT);\r                uq1 = midPoint(UpsemiOuts[0], UpsemiIns[1], upT);\r                uq2 = midPoint(UpsemiIns[1], UpsemiVerts[1], upT);\r                ur0 = midPoint(uq0, uq1, upT);\r                ur1 = midPoint(uq1, uq2, upT);\r                us0 = midPoint(ur0, ur1, upT);\r                newA = -Math.atan2(-dist - splitY, xOnCircleGivenY(-dist - splitY, rad2));\r                newT = newA / upA;\r                nq0 = midPoint(UpsemiVerts[0], uq0, newT);\r                nq1 = midPoint(uq0, ur0, newT);\r                nq2 = midPoint(ur0, us0, newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                newVerts = [s0, semiVerts[1], flipX(s0), flipX(r3a), flipX(ns0), [0, splitY], ns0, us0];\r                newIns = tangentsRelative(newVerts, [s0, q2, flipX(r1), flipX(r3a), flipX(nr1), [0, splitY], ns0, us0]);\r                newOuts = tangentsRelative(newVerts, [r1, flipX(q2), flipX(r0), flipX(nq2), flipX(ns0), [0, splitY], nr1, r3a]);\r            }\r            else {\r                state = 4;\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, s0);\r                v4 = flipX(v6);\r                newVerts = [s0, s0, semiVerts[1], flipX(s0), v4, [0, splitY], v6, v6];\r                newIns = tangentsRelative(newVerts, [s0, s0, q2, flipX(r1), v4, [0, splitY], v6, v6]);\r                newOuts = tangentsRelative(newVerts, [s0, r1, flipX(q2), flipX(r0), v4, [0, splitY], v6, r0]);\r            }\r        }\r        if (isProximal != true) {\r            const tempVerts = newVerts;\r            const tempIns = newIns;\r            const tempOuts = newOuts;\r            newVerts = flipArrayY(tempVerts, -dist * 0.5).reverse();\r            newIns = flipArrayY(tempOuts, 0).reverse();\r            newOuts = flipArrayY(tempIns, 0).reverse();\r        }\r        if (pers != 0) {\r\t\t\tlet pVert, newVertAdd;\r\t\t\tif (isProximal) {\r\t\t\t\tpVert = 5;\r\t\t\t\tnewVertAdd = [0, newVerts[pVert + 1][0] * pers];\r\t\t\t} else {\r\t\t\t\tpVert = 2;\r\t\t\t\tnewVertAdd = [0, -newVerts[pVert + 1][0] * pers];\r\t\t\t}\t\t\t\r            newVerts[pVert] = thisLayer.add(newVerts[pVert], newVertAdd);\r            newIns[pVert] = [-newVerts[pVert + 1][0] * semiFac, 0];\r            newOuts[pVert] = [newVerts[pVert + 1][0] * semiFac, 0];\r            const B = isProximal ? Math.PI * 0.5 - A : -(Math.PI * 0.5 + A);\r            const temp6 = newVerts[pVert + 1][0] * semiFac * pers;\r            newIns[pVert + 1][0] = -temp6 * Math.sin(B);\r            newIns[pVert + 1][1] = temp6 * Math.cos(B);\r            const temp4 = newVerts[pVert + 1][0] * semiFac * pers;\r            newOuts[pVert - 1][0] = -temp4 * Math.sin(-B);\r            newOuts[pVert - 1][1] = temp4 * Math.cos(-B);\r        }\r        createPath(newVerts, newIns, newOuts, true);",                                    "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,0],[0,0],[29.8918762207031,0],[0.76670837402344,29.7070007324219],[0,0],[0,0],[0,0],[0,0]],\"outTangents\":[[0,0],[-0.76670837402344,29.7070007324219],[-29.8918762207031,0],[-0.01240539550781,-0.48049926757812],[0,0],[0,0],[0,0],[-1.78668212890625,71.4648590087891]],\"vertices\":[[54.9808349609375,1.44602966308594],[54.9808349609375,1.44602966308594],[0,54.9994659423828],[-54.9808349609375,1.44602966308594],[-56.7799072265625,-70.4993286132812],[0,-70.4993286132812],[56.7799072265625,-70.4993286132812],[56.7799072265625,-70.4993286132812]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Foot with Toes')('Start Color');",                                    "value": "[0.24593470990658,0.58137518167496,0.67504596710205,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Transform Group",                    "name": "Transform",                    "type": "NAMED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Position",                        "name": "Position",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "thisComp.layer('{{ end }}').content('Admin')('ADBE Vectors Group')('p1').transform.position",                        "value": "[300,150]"                      },                      {                        "matchName": "ADBE Vector Rotation",                        "name": "Rotation",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "thisComp.layer('{{ end }}').content('Admin')('ADBE Vectors Group')('ikfkfreekanglessides').transform.anchorPoint[0]",                        "value": "138.591000940008"                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Materials Group",                    "name": "Material Options",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  }                ],                "enabled": true              },              {                "matchName": "ADBE Vector Group",                "name": "Lower Group",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vectors Group",                    "name": "Contents",                    "type": "INDEXED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Group",                        "name": "Proximal Lower",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Taper Path",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "const thisProp = thisProperty;\r        // Limber Taper\r        function midPoint(p1, p2, per) {\r            return [p1[0] + (p2[0] - p1[0]) * per, p1[1] + (p2[1] - p1[1]) * per];\r        }\r        function tangentsAbsolute(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.add(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function tangentsRelative(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.sub(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function flipX(point) {\r            return [-point[0], point[1]];\r        }\r        function flipY(point) {\r            return [point[0], -point[1]];\r        }\r        function flipXY(point) {\r            return [-point[0], -point[1]];\r        }\r        function flipArrayY(vertices, flipPoint) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                vertices[i] = [vertices[i][0], flipPoint * 2 - vertices[i][1]];\r            }\r            return vertices;\r        }\r        function pointAlongY(val, p1, p2) {\r            const linearValue = thisLayer.linear(val, p1[1], p2[1], p1[0], p2[0]);\r            return [linearValue, val];\r        }\r        function xOnCircleGivenY(x, r) {\r            return Math.sqrt(r * r - x * x);\r        }\r        const semiFac = 0.5522847498307933;\r        const quad = 0.5 * Math.PI;\r        const groupName = thisProp.propertyGroup(3).name;\r        const isUpper = groupName.split(' ')[1] === 'Upper';\r        const isProximal = groupName.split(' ')[0] === 'Proximal';\r        const endctrl = thisComp.layer('{{ end }}');\r        const lowerSplitValue = thisLayer.effect('Foot with Toes')('Lower Split').value * 0.01;\r        const upperSplitValue = thisLayer.effect('Foot with Toes')('Upper Split').value * 0.01;\r        const lowerRoundingValue = thisLayer.effect('Foot with Toes')('Lower Rounding').value * 0.01;\r        const upperRoundingValue = thisLayer.effect('Foot with Toes')('Upper Rounding').value * 0.01;\r        const sides = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('ikfkfreekanglessides').transform.position;\r        const widthScale = endctrl.effect('Pseudo/skl_main_04')('Width Scale').value * 0.01;\r        const scaleFactor = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('scaleFactor').transform.scale[0];\r        const s1 = thisLayer.effect('Foot with Toes')('Start Width').value * widthScale * scaleFactor;\r        const s3 = thisLayer.effect('Foot with Toes')('End Width').value * widthScale * scaleFactor;\r        const s2 = thisLayer.effect('Foot with Toes')('Middle Width').value * widthScale * scaleFactor;\r\t\tlet c1, c2, dist;\r        if (isUpper) {\r            c2 = s2;\r            c1 = s1;\r            dist = sides[1];\r        }\r        else {\r            c1 = s2;\r            c2 = s3;\r            dist = sides[0];\r        }\r        const distrad = c2 * 0.5;\r        const proxrad = c1 * 0.5;\r        let pers = -lowerRoundingValue;\r        let splitY = isProximal ? lowerSplitValue : 1 - lowerSplitValue;\r        if (isUpper) {\r            pers = -upperRoundingValue;\r            splitY = isProximal ? upperSplitValue : 1 - upperSplitValue;\r        }\r        splitY = -dist * splitY - 0.5;\r        const rad1 = Math.round((isProximal ? proxrad : distrad) * 100000) / 100000;\r        const rad2 = Math.round((isProximal ? distrad : proxrad) * 100000) / 100000;\r        const A = Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r        const r3a = [rad2 * Math.sin(A), -(dist - rad2 * Math.cos(A))];\r        const r3b = [rad1 * Math.sin(A), rad1 * Math.cos(A)];\r        const semiVerts = [\r            [rad1, 0],\r            [0, rad1],\r            [-rad1, 0],\r        ];\r        const semiIns = tangentsAbsolute(semiVerts, [\r            [0, 0],\r            [rad1 * semiFac, 0],\r            [0, rad1 * semiFac],\r        ]);\r        const semiOuts = tangentsAbsolute(semiVerts, [\r            [0, rad1 * semiFac],\r            [-rad1 * semiFac, 0],\r            [0, 0],\r        ]);\r\t\tlet newVerts, newIns, newOuts, state, newA, newT,nq0, nq1, nq2, nr0, nr1, ns0, t, q0, q1, q2, r0, r1, s0, v4, v6, uq0, uq1, uq2, ur0, ur1, us0, upA, upT;\r        if (rad2 < rad1) {\r            if (splitY > r3b[1]) {\r                state = 1;\r                newA = -Math.atan2(splitY, xOnCircleGivenY(splitY, rad1));\r                newT = newA / quad;\r                nq0 = midPoint(semiVerts[0], semiOuts[0], newT);\r                nq1 = midPoint(semiOuts[0], semiIns[1], newT);\r                nq2 = midPoint(semiIns[1], semiVerts[1], newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[0], semiVerts[1], semiVerts[2], flipXY(ns0), [0, splitY], flipY(ns0), flipY(ns0)];\r                newIns = tangentsRelative(newVerts, [\r                    flipY(nq0),\r                    semiVerts[0],\r                    semiIns[1],\r                    semiIns[2],\r                    flipXY(nr0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(ns0),\r                ]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiVerts[0],\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(nq0),\r                    flipXY(ns0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(nr0),\r                ]);\r            }\r            else {\r                state = 2;\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                v4 = flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[1], semiVerts[2], flipXY(s0), v4, [0, splitY], v6, flipY(s0)];\r                newIns = tangentsRelative(newVerts, [flipY(q0), semiIns[1], semiIns[2], flipXY(r0), v4, [0, splitY], v6, flipY(s0)]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(q0),\r                    flipXY(s0),\r                    v4,\r                    [0, splitY],\r                    v6,\r                    flipY(r0),\r                ]);\r            }\r        }\r        else {\r            if (splitY < r3a[1]) {\r                state = 3;\r                const UpsemiVerts = [\r                    [rad2, -dist],\r                    [0, -(dist - rad2)],\r                    [-rad2, -dist],\r                ];\r                const UpsemiIns = tangentsAbsolute(UpsemiVerts, [\r                    [0, 0],\r                    [rad2 * semiFac, 0],\r                    [0, rad2 * semiFac],\r                ]);\r                const UpsemiOuts = tangentsAbsolute(UpsemiVerts, [\r                    [0, rad2 * semiFac],\r                    [-rad2 * semiFac, 0],\r                    [0, 0],\r                ]);\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                if (rad2 == rad1) {\r                    upA = 0.00001;\r                }\r                else {\r                    upA = quad - Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r                }\r                upT = upA / quad;\r                uq0 = midPoint(UpsemiVerts[0], UpsemiOuts[0], upT);\r                uq1 = midPoint(UpsemiOuts[0], UpsemiIns[1], upT);\r                uq2 = midPoint(UpsemiIns[1], UpsemiVerts[1], upT);\r                ur0 = midPoint(uq0, uq1, upT);\r                ur1 = midPoint(uq1, uq2, upT);\r                us0 = midPoint(ur0, ur1, upT);\r                newA = -Math.atan2(-dist - splitY, xOnCircleGivenY(-dist - splitY, rad2));\r                newT = newA / upA;\r                nq0 = midPoint(UpsemiVerts[0], uq0, newT);\r                nq1 = midPoint(uq0, ur0, newT);\r                nq2 = midPoint(ur0, us0, newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                newVerts = [s0, semiVerts[1], flipX(s0), flipX(r3a), flipX(ns0), [0, splitY], ns0, us0];\r                newIns = tangentsRelative(newVerts, [s0, q2, flipX(r1), flipX(r3a), flipX(nr1), [0, splitY], ns0, us0]);\r                newOuts = tangentsRelative(newVerts, [r1, flipX(q2), flipX(r0), flipX(nq2), flipX(ns0), [0, splitY], nr1, r3a]);\r            }\r            else {\r                state = 4;\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, s0);\r                v4 = flipX(v6);\r                newVerts = [s0, s0, semiVerts[1], flipX(s0), v4, [0, splitY], v6, v6];\r                newIns = tangentsRelative(newVerts, [s0, s0, q2, flipX(r1), v4, [0, splitY], v6, v6]);\r                newOuts = tangentsRelative(newVerts, [s0, r1, flipX(q2), flipX(r0), v4, [0, splitY], v6, r0]);\r            }\r        }\r        if (isProximal != true) {\r            const tempVerts = newVerts;\r            const tempIns = newIns;\r            const tempOuts = newOuts;\r            newVerts = flipArrayY(tempVerts, -dist * 0.5).reverse();\r            newIns = flipArrayY(tempOuts, 0).reverse();\r            newOuts = flipArrayY(tempIns, 0).reverse();\r        }\r        if (pers != 0) {\r\t\t\tlet pVert, newVertAdd;\r\t\t\tif (isProximal) {\r\t\t\t\tpVert = 5;\r\t\t\t\tnewVertAdd = [0, newVerts[pVert + 1][0] * pers];\r\t\t\t} else {\r\t\t\t\tpVert = 2;\r\t\t\t\tnewVertAdd = [0, -newVerts[pVert + 1][0] * pers];\r\t\t\t}\t\t\t\r            newVerts[pVert] = thisLayer.add(newVerts[pVert], newVertAdd);\r            newIns[pVert] = [-newVerts[pVert + 1][0] * semiFac, 0];\r            newOuts[pVert] = [newVerts[pVert + 1][0] * semiFac, 0];\r            const B = isProximal ? Math.PI * 0.5 - A : -(Math.PI * 0.5 + A);\r            const temp6 = newVerts[pVert + 1][0] * semiFac * pers;\r            newIns[pVert + 1][0] = -temp6 * Math.sin(B);\r            newIns[pVert + 1][1] = temp6 * Math.cos(B);\r            const temp4 = newVerts[pVert + 1][0] * semiFac * pers;\r            newOuts[pVert - 1][0] = -temp4 * Math.sin(-B);\r            newOuts[pVert - 1][1] = temp4 * Math.cos(-B);\r        }\r        createPath(newVerts, newIns, newOuts, true);",                                    "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,0],[0,0],[32.8730621337891,0],[0.42283630371094,32.772705078125],[0,0],[0,0],[0,0],[0,0]],\"outTangents\":[[0,0],[-0.42283630371094,32.772705078125],[-32.8730621337891,0],[-0.00340270996094,-0.26289367675781],[0,0],[0,0],[0,0],[-1.18775939941406,95.0261077880859]],\"vertices\":[[59.9943237304688,0.78990173339844],[59.9943237304688,0.78990173339844],[0,59.9994201660156],[-59.9943237304688,0.78990173339844],[-61.1854858398438,-94.4990997314453],[0,-94.4990997314453],[61.1854858398438,-94.4990997314453],[61.1854858398438,-94.4990997314453]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Foot with Toes')('Middle Color');",                                    "value": "[0.4190948009491,0.68833327293396,0.7643535733223,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      },                      {                        "matchName": "ADBE Vector Group",                        "name": "Distal Lower",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Taper Path",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape Direction",                                    "name": "Shape Direction",                                    "type": "PROPERTY",                                    "enabled": true,                                    "value": "2"                                  },                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "const thisProp = thisProperty;\r        // Limber Taper\r        function midPoint(p1, p2, per) {\r            return [p1[0] + (p2[0] - p1[0]) * per, p1[1] + (p2[1] - p1[1]) * per];\r        }\r        function tangentsAbsolute(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.add(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function tangentsRelative(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = thisLayer.sub(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function flipX(point) {\r            return [-point[0], point[1]];\r        }\r        function flipY(point) {\r            return [point[0], -point[1]];\r        }\r        function flipXY(point) {\r            return [-point[0], -point[1]];\r        }\r        function flipArrayY(vertices, flipPoint) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                vertices[i] = [vertices[i][0], flipPoint * 2 - vertices[i][1]];\r            }\r            return vertices;\r        }\r        function pointAlongY(val, p1, p2) {\r            const linearValue = thisLayer.linear(val, p1[1], p2[1], p1[0], p2[0]);\r            return [linearValue, val];\r        }\r        function xOnCircleGivenY(x, r) {\r            return Math.sqrt(r * r - x * x);\r        }\r        const semiFac = 0.5522847498307933;\r        const quad = 0.5 * Math.PI;\r        const groupName = thisProp.propertyGroup(3).name;\r        const isUpper = groupName.split(' ')[1] === 'Upper';\r        const isProximal = groupName.split(' ')[0] === 'Proximal';\r        const endctrl = thisComp.layer('{{ end }}');\r        const lowerSplitValue = thisLayer.effect('Foot with Toes')('Lower Split').value * 0.01;\r        const upperSplitValue = thisLayer.effect('Foot with Toes')('Upper Split').value * 0.01;\r        const lowerRoundingValue = thisLayer.effect('Foot with Toes')('Lower Rounding').value * 0.01;\r        const upperRoundingValue = thisLayer.effect('Foot with Toes')('Upper Rounding').value * 0.01;\r        const sides = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('ikfkfreekanglessides').transform.position;\r        const widthScale = endctrl.effect('Pseudo/skl_main_04')('Width Scale').value * 0.01;\r        const scaleFactor = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('scaleFactor').transform.scale[0];\r        const s1 = thisLayer.effect('Foot with Toes')('Start Width').value * widthScale * scaleFactor;\r        const s3 = thisLayer.effect('Foot with Toes')('End Width').value * widthScale * scaleFactor;\r        const s2 = thisLayer.effect('Foot with Toes')('Middle Width').value * widthScale * scaleFactor;\r\t\tlet c1, c2, dist;\r        if (isUpper) {\r            c2 = s2;\r            c1 = s1;\r            dist = sides[1];\r        }\r        else {\r            c1 = s2;\r            c2 = s3;\r            dist = sides[0];\r        }\r        const distrad = c2 * 0.5;\r        const proxrad = c1 * 0.5;\r        let pers = -lowerRoundingValue;\r        let splitY = isProximal ? lowerSplitValue : 1 - lowerSplitValue;\r        if (isUpper) {\r            pers = -upperRoundingValue;\r            splitY = isProximal ? upperSplitValue : 1 - upperSplitValue;\r        }\r        splitY = -dist * splitY - 0.5;\r        const rad1 = Math.round((isProximal ? proxrad : distrad) * 100000) / 100000;\r        const rad2 = Math.round((isProximal ? distrad : proxrad) * 100000) / 100000;\r        const A = Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r        const r3a = [rad2 * Math.sin(A), -(dist - rad2 * Math.cos(A))];\r        const r3b = [rad1 * Math.sin(A), rad1 * Math.cos(A)];\r        const semiVerts = [\r            [rad1, 0],\r            [0, rad1],\r            [-rad1, 0],\r        ];\r        const semiIns = tangentsAbsolute(semiVerts, [\r            [0, 0],\r            [rad1 * semiFac, 0],\r            [0, rad1 * semiFac],\r        ]);\r        const semiOuts = tangentsAbsolute(semiVerts, [\r            [0, rad1 * semiFac],\r            [-rad1 * semiFac, 0],\r            [0, 0],\r        ]);\r\t\tlet newVerts, newIns, newOuts, state, newA, newT,nq0, nq1, nq2, nr0, nr1, ns0, t, q0, q1, q2, r0, r1, s0, v4, v6, uq0, uq1, uq2, ur0, ur1, us0, upA, upT;\r        if (rad2 < rad1) {\r            if (splitY > r3b[1]) {\r                state = 1;\r                newA = -Math.atan2(splitY, xOnCircleGivenY(splitY, rad1));\r                newT = newA / quad;\r                nq0 = midPoint(semiVerts[0], semiOuts[0], newT);\r                nq1 = midPoint(semiOuts[0], semiIns[1], newT);\r                nq2 = midPoint(semiIns[1], semiVerts[1], newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[0], semiVerts[1], semiVerts[2], flipXY(ns0), [0, splitY], flipY(ns0), flipY(ns0)];\r                newIns = tangentsRelative(newVerts, [\r                    flipY(nq0),\r                    semiVerts[0],\r                    semiIns[1],\r                    semiIns[2],\r                    flipXY(nr0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(ns0),\r                ]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiVerts[0],\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(nq0),\r                    flipXY(ns0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(nr0),\r                ]);\r            }\r            else {\r                state = 2;\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                v4 = flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[1], semiVerts[2], flipXY(s0), v4, [0, splitY], v6, flipY(s0)];\r                newIns = tangentsRelative(newVerts, [flipY(q0), semiIns[1], semiIns[2], flipXY(r0), v4, [0, splitY], v6, flipY(s0)]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(q0),\r                    flipXY(s0),\r                    v4,\r                    [0, splitY],\r                    v6,\r                    flipY(r0),\r                ]);\r            }\r        }\r        else {\r            if (splitY < r3a[1]) {\r                state = 3;\r                const UpsemiVerts = [\r                    [rad2, -dist],\r                    [0, -(dist - rad2)],\r                    [-rad2, -dist],\r                ];\r                const UpsemiIns = tangentsAbsolute(UpsemiVerts, [\r                    [0, 0],\r                    [rad2 * semiFac, 0],\r                    [0, rad2 * semiFac],\r                ]);\r                const UpsemiOuts = tangentsAbsolute(UpsemiVerts, [\r                    [0, rad2 * semiFac],\r                    [-rad2 * semiFac, 0],\r                    [0, 0],\r                ]);\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                if (rad2 == rad1) {\r                    upA = 0.00001;\r                }\r                else {\r                    upA = quad - Math.acos(thisLayer.clamp((rad2 - rad1) / dist, -1, 1));\r                }\r                upT = upA / quad;\r                uq0 = midPoint(UpsemiVerts[0], UpsemiOuts[0], upT);\r                uq1 = midPoint(UpsemiOuts[0], UpsemiIns[1], upT);\r                uq2 = midPoint(UpsemiIns[1], UpsemiVerts[1], upT);\r                ur0 = midPoint(uq0, uq1, upT);\r                ur1 = midPoint(uq1, uq2, upT);\r                us0 = midPoint(ur0, ur1, upT);\r                newA = -Math.atan2(-dist - splitY, xOnCircleGivenY(-dist - splitY, rad2));\r                newT = newA / upA;\r                nq0 = midPoint(UpsemiVerts[0], uq0, newT);\r                nq1 = midPoint(uq0, ur0, newT);\r                nq2 = midPoint(ur0, us0, newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                newVerts = [s0, semiVerts[1], flipX(s0), flipX(r3a), flipX(ns0), [0, splitY], ns0, us0];\r                newIns = tangentsRelative(newVerts, [s0, q2, flipX(r1), flipX(r3a), flipX(nr1), [0, splitY], ns0, us0]);\r                newOuts = tangentsRelative(newVerts, [r1, flipX(q2), flipX(r0), flipX(nq2), flipX(ns0), [0, splitY], nr1, r3a]);\r            }\r            else {\r                state = 4;\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, s0);\r                v4 = flipX(v6);\r                newVerts = [s0, s0, semiVerts[1], flipX(s0), v4, [0, splitY], v6, v6];\r                newIns = tangentsRelative(newVerts, [s0, s0, q2, flipX(r1), v4, [0, splitY], v6, v6]);\r                newOuts = tangentsRelative(newVerts, [s0, r1, flipX(q2), flipX(r0), v4, [0, splitY], v6, r0]);\r            }\r        }\r        if (isProximal != true) {\r            const tempVerts = newVerts;\r            const tempIns = newIns;\r            const tempOuts = newOuts;\r            newVerts = flipArrayY(tempVerts, -dist * 0.5).reverse();\r            newIns = flipArrayY(tempOuts, 0).reverse();\r            newOuts = flipArrayY(tempIns, 0).reverse();\r        }\r        if (pers != 0) {\r\t\t\tlet pVert, newVertAdd;\r\t\t\tif (isProximal) {\r\t\t\t\tpVert = 5;\r\t\t\t\tnewVertAdd = [0, newVerts[pVert + 1][0] * pers];\r\t\t\t} else {\r\t\t\t\tpVert = 2;\r\t\t\t\tnewVertAdd = [0, -newVerts[pVert + 1][0] * pers];\r\t\t\t}\t\t\t\r            newVerts[pVert] = thisLayer.add(newVerts[pVert], newVertAdd);\r            newIns[pVert] = [-newVerts[pVert + 1][0] * semiFac, 0];\r            newOuts[pVert] = [newVerts[pVert + 1][0] * semiFac, 0];\r            const B = isProximal ? Math.PI * 0.5 - A : -(Math.PI * 0.5 + A);\r            const temp6 = newVerts[pVert + 1][0] * semiFac * pers;\r            newIns[pVert + 1][0] = -temp6 * Math.sin(B);\r            newIns[pVert + 1][1] = temp6 * Math.cos(B);\r            const temp4 = newVerts[pVert + 1][0] * semiFac * pers;\r            newOuts[pVert - 1][0] = -temp4 * Math.sin(-B);\r            newOuts[pVert - 1][1] = temp4 * Math.cos(-B);\r        }\r        createPath(newVerts, newIns, newOuts, true);",                                    "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0.00352478027344,-0.27384948730469],[0,0],[0,0],[0,0],[0,0],[0,0.27468872070312],[-34.5174713134766,0],[0,-34.5174560546875]],\"outTangents\":[[0,0],[0,0],[0,0],[0,0],[-0.0035400390625,-0.27384948730469],[0,-34.5174560546875],[34.5174560546875,0],[0,0.27468872070312]],\"vertices\":[[62.4940948486328,-199.175262451172],[61.1729888916016,-93.4990997314453],[0,-93.4990997314453],[-61.1729888916016,-93.4990997314453],[-62.4940948486328,-199.175262451172],[-62.4994049072266,-199.998077392578],[0,-262.497467041016],[62.4994049072266,-199.998077392578]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Foot with Toes')('End Color');",                                    "value": "[0.85657167434692,0.67253869771957,0.24312832951546,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Transform Group",                    "name": "Transform",                    "type": "NAMED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Position",                        "name": "Position",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "thisComp.layer('{{ end }}').content('Admin')('ADBE Vectors Group')('p2ikfkfreek').transform.position",                        "value": "[432.284665778022,300]"                      },                      {                        "matchName": "ADBE Vector Rotation",                        "name": "Rotation",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "thisComp.layer('{{ end }}').content('Admin')('ADBE Vectors Group')('ikfkfreekanglessides').transform.anchorPoint[1]",                        "value": "221.408999059992"                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Materials Group",                    "name": "Material Options",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  }                ],                "enabled": true              },              {                "matchName": "ADBE Vector Group",                "name": "Foot Group",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vectors Group",                    "name": "Contents",                    "type": "INDEXED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Group",                        "name": "Foot",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Group",                                "name": "Wedge Group",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vectors Group",                                    "name": "Contents",                                    "type": "INDEXED_GROUP",                                    "properties": [                                      {                                        "matchName": "ADBE Vector Shape - Group",                                        "name": "Wedge Path",                                        "type": "NAMED_GROUP",                                        "properties": [                                          {                                            "matchName": "ADBE Vector Shape",                                            "name": "Path",                                            "type": "PROPERTY",                                            "enabled": true,                                            "expression": "const s4 = thisLayer.effect('Foot with Toes')('Foot Length');\rconst c3 = thisProperty.propertyGroup(4)('C3 Group')('Contents')('C3').size[0] * 0.5;\nconst c4 = thisProperty.propertyGroup(4)('C4 Group')('Contents')('C4').size[0] * 0.5;\nlet A, r3a, r3b;\ntry {\n    A = Math.acos(thisLayer.clamp((c3 - c4) / s4, -1, 1));\n    r3a = 0 - [c4 * Math.sin(A), s4 + c4 * Math.cos(A)];\n    r3b = 0 - [c3 * Math.sin(A), c3 * Math.cos(A)];\n} catch (err) {\n    value;\n}\nthisProperty.createPath(points = [[0 - r3a[0], r3a[1]], r3a, r3b, [0 - r3b[0], r3b[1]]], inTangents = [], outTangents = [], is_closed = true);",                                            "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,0],[0,0],[0,0],[0,0]],\"outTangents\":[[0,0],[0,0],[0,0],[0,0]],\"vertices\":[[28.3714294433594,-109.75],[-28.3714141845703,-109.75],[-59.1071319580078,-20.3125],[59.1071319580078,-20.3125]]}"                                          }                                        ],                                        "enabled": true                                      }                                    ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Transform Group",                                    "name": "Transform",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Materials Group",                                    "name": "Material Options",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Group",                                "name": "C3 Group",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vectors Group",                                    "name": "Contents",                                    "type": "INDEXED_GROUP",                                    "properties": [                                      {                                        "matchName": "ADBE Vector Shape - Ellipse",                                        "name": "C3",                                        "type": "NAMED_GROUP",                                        "properties": [                                          {                                            "matchName": "ADBE Vector Ellipse Size",                                            "name": "Size",                                            "type": "PROPERTY",                                            "enabled": true,                                            "expression": "const temp = thisLayer.effect('Foot with Toes')('End Width');\r[temp, temp]",                                            "value": "[125,125]"                                          }                                        ],                                        "enabled": true                                      }                                    ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Transform Group",                                    "name": "Transform",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Materials Group",                                    "name": "Material Options",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Group",                                "name": "C4 Group",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vectors Group",                                    "name": "Contents",                                    "type": "INDEXED_GROUP",                                    "properties": [                                      {                                        "matchName": "ADBE Vector Shape - Ellipse",                                        "name": "C4",                                        "type": "NAMED_GROUP",                                        "properties": [                                          {                                            "matchName": "ADBE Vector Ellipse Size",                                            "name": "Size",                                            "type": "PROPERTY",                                            "enabled": true,                                            "expression": "const temp = thisLayer.effect('Foot with Toes')('Ball Width');\r[temp, temp]",                                            "value": "[60,60]"                                          }                                        ],                                        "enabled": true                                      },                                      {                                        "matchName": "ADBE Vector Group",                                        "name": "Toes Group",                                        "type": "NAMED_GROUP",                                        "properties": [                                          {                                            "matchName": "ADBE Vectors Group",                                            "name": "Contents",                                            "type": "INDEXED_GROUP",                                            "properties": [                                              {                                                "matchName": "ADBE Vector Group",                                                "name": "Wedge Group",                                                "type": "NAMED_GROUP",                                                "properties": [                                                  {                                                    "matchName": "ADBE Vectors Group",                                                    "name": "Contents",                                                    "type": "INDEXED_GROUP",                                                    "properties": [                                                      {                                                        "matchName": "ADBE Vector Shape - Group",                                                        "name": "Wedge Path",                                                        "type": "NAMED_GROUP",                                                        "properties": [                                                          {                                                            "matchName": "ADBE Vector Shape",                                                            "name": "Path",                                                            "type": "PROPERTY",                                                            "enabled": true,                                                            "expression": "const s4 = thisLayer.effect('Foot with Toes')('Toe Length');\rconst c3 = thisProperty.propertyGroup(4)('C4 Group')('Contents')('C4').size[0] * 0.5;\nconst c4 = thisProperty.propertyGroup(4)('C5 Group')('Contents')('C5').size[0] * 0.5;\nlet A, r3a, r3b;\ntry {\n    A = Math.acos(thisLayer.clamp((c3 - c4) / s4, -1, 1));\n    r3a = 0 - [c4 * Math.sin(A), s4 + c4 * Math.cos(A)];\n    r3b = 0 - [c3 * Math.sin(A), c3 * Math.cos(A)];\n} catch (err) {\n    value;\n}\nthisProperty.createPath(points = [[0 - r3a[0], r3a[1]], r3a, r3b, [0 - r3b[0], r3b[1]]], inTangents = [], outTangents = [], is_closed = true);",                                                            "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,0],[0,0],[0,0],[0,0]],\"outTangents\":[[0,0],[0,0],[0,0],[0,0]],\"vertices\":[[11.240234375,-45.46875],[-11.240234375,-45.46875],[-26.9765472412109,-13.125],[26.9765472412109,-13.125]]}"                                                          }                                                        ],                                                        "enabled": true                                                      }                                                    ],                                                    "enabled": true                                                  },                                                  {                                                    "matchName": "ADBE Vector Transform Group",                                                    "name": "Transform",                                                    "type": "NAMED_GROUP",                                                    "properties": [                                                                                                          ],                                                    "enabled": true                                                  },                                                  {                                                    "matchName": "ADBE Vector Materials Group",                                                    "name": "Material Options",                                                    "type": "NAMED_GROUP",                                                    "properties": [                                                                                                          ],                                                    "enabled": true                                                  }                                                ],                                                "enabled": true                                              },                                              {                                                "matchName": "ADBE Vector Group",                                                "name": "C4 Group",                                                "type": "NAMED_GROUP",                                                "properties": [                                                  {                                                    "matchName": "ADBE Vectors Group",                                                    "name": "Contents",                                                    "type": "INDEXED_GROUP",                                                    "properties": [                                                      {                                                        "matchName": "ADBE Vector Shape - Ellipse",                                                        "name": "C4",                                                        "type": "NAMED_GROUP",                                                        "properties": [                                                          {                                                            "matchName": "ADBE Vector Ellipse Size",                                                            "name": "Size",                                                            "type": "PROPERTY",                                                            "enabled": true,                                                            "expression": "const temp = thisLayer.effect('Foot with Toes')('Ball Width');\r[temp, temp]",                                                            "value": "[60,60]"                                                          }                                                        ],                                                        "enabled": true                                                      }                                                    ],                                                    "enabled": true                                                  },                                                  {                                                    "matchName": "ADBE Vector Transform Group",                                                    "name": "Transform",                                                    "type": "NAMED_GROUP",                                                    "properties": [                                                                                                          ],                                                    "enabled": true                                                  },                                                  {                                                    "matchName": "ADBE Vector Materials Group",                                                    "name": "Material Options",                                                    "type": "NAMED_GROUP",                                                    "properties": [                                                                                                          ],                                                    "enabled": true                                                  }                                                ],                                                "enabled": true                                              },                                              {                                                "matchName": "ADBE Vector Group",                                                "name": "C5 Group",                                                "type": "NAMED_GROUP",                                                "properties": [                                                  {                                                    "matchName": "ADBE Vectors Group",                                                    "name": "Contents",                                                    "type": "INDEXED_GROUP",                                                    "properties": [                                                      {                                                        "matchName": "ADBE Vector Shape - Ellipse",                                                        "name": "C5",                                                        "type": "NAMED_GROUP",                                                        "properties": [                                                          {                                                            "matchName": "ADBE Vector Ellipse Size",                                                            "name": "Size",                                                            "type": "PROPERTY",                                                            "enabled": true,                                                            "expression": "const temp = thisLayer.effect('Foot with Toes')('Tip Width');\r[temp, temp]",                                                            "value": "[25,25]"                                                          }                                                        ],                                                        "enabled": true                                                      }                                                    ],                                                    "enabled": true                                                  },                                                  {                                                    "matchName": "ADBE Vector Transform Group",                                                    "name": "Transform",                                                    "type": "NAMED_GROUP",                                                    "properties": [                                                      {                                                        "matchName": "ADBE Vector Position",                                                        "name": "Position",                                                        "type": "PROPERTY",                                                        "enabled": true,                                                        "expression": "[0, -thisLayer.effect('Foot with Toes')('Toe Length')];",                                                        "value": "[0,-40]"                                                      }                                                    ],                                                    "enabled": true                                                  },                                                  {                                                    "matchName": "ADBE Vector Materials Group",                                                    "name": "Material Options",                                                    "type": "NAMED_GROUP",                                                    "properties": [                                                                                                          ],                                                    "enabled": true                                                  }                                                ],                                                "enabled": true                                              },                                              {                                                "matchName": "ADBE Vector Filter - Merge",                                                "name": "Merge Paths Add",                                                "type": "NAMED_GROUP",                                                "properties": [                                                  {                                                    "matchName": "ADBE Vector Merge Type",                                                    "name": "Mode",                                                    "type": "PROPERTY",                                                    "enabled": true,                                                    "value": "2"                                                  }                                                ],                                                "enabled": true                                              },                                              {                                                "matchName": "ADBE Vector Graphic - Fill",                                                "name": "Fill",                                                "type": "NAMED_GROUP",                                                "properties": [                                                  {                                                    "matchName": "ADBE Vector Fill Color",                                                    "name": "Color",                                                    "type": "PROPERTY",                                                    "enabled": true,                                                    "expression": "thisLayer.effect('Foot with Toes')('End Color')",                                                    "value": "[0.85657167434692,0.67253869771957,0.24312832951546,1]"                                                  }                                                ],                                                "enabled": true                                              }                                            ],                                            "enabled": true                                          },                                          {                                            "matchName": "ADBE Vector Transform Group",                                            "name": "Transform",                                            "type": "NAMED_GROUP",                                            "properties": [                                              {                                                "matchName": "ADBE Vector Rotation",                                                "name": "Rotation",                                                "type": "PROPERTY",                                                "enabled": true,                                                "expression": "thisLayer.effect('Foot with Toes')('Toe Angle')",                                                "value": "-44"                                              }                                            ],                                            "enabled": true                                          },                                          {                                            "matchName": "ADBE Vector Materials Group",                                            "name": "Material Options",                                            "type": "NAMED_GROUP",                                            "properties": [                                                                                          ],                                            "enabled": true                                          }                                        ],                                        "enabled": true                                      }                                    ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Transform Group",                                    "name": "Transform",                                    "type": "NAMED_GROUP",                                    "properties": [                                      {                                        "matchName": "ADBE Vector Position",                                        "name": "Position",                                        "type": "PROPERTY",                                        "enabled": true,                                        "expression": "[0, -thisLayer.effect('Foot with Toes')('Foot Length')];",                                        "value": "[0,-100]"                                      }                                    ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Materials Group",                                    "name": "Material Options",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Filter - Merge",                                "name": "Merge Paths Add",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Merge Type",                                    "name": "Mode",                                    "type": "PROPERTY",                                    "enabled": true,                                    "value": "2"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill 1",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Foot with Toes')('End Color')",                                    "value": "[0.85657167434692,0.67253869771957,0.24312832951546,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Transform Group",                    "name": "Transform",                    "type": "NAMED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Position",                        "name": "Position",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "const endctrl = thisComp.layer('{{ end }}');\rendctrl.content('Admin').content('p3ikfkfreek').transform.position;",                        "value": "[300,450]"                      },                      {                        "matchName": "ADBE Vector Scale",                        "name": "Scale",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "const endctrl = thisComp.layer('{{ end }}');\rconst scaleFactor = endctrl('ADBE Root Vectors Group')('Admin')('ADBE Vectors Group')('scaleFactor').transform.scale[0];\rconst widthScale = endctrl.effect('Limber')('Width Scale') * 0.01;\rconst footScale = scaleFactor * widthScale * 100;\r[footScale, footScale]",                        "value": "[99.9990409954051,99.9990409954051]"                      },                      {                        "matchName": "ADBE Vector Rotation",                        "name": "Rotation",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "const endctrl = thisComp.layer('{{ end }}');\r((thisLayer.effect('Foot with Toes')('Auto-rotate') * 0.01) * endctrl.content('Admin').content('ikfkfreekanglessides').transform.anchorPoint[1]) + thisLayer.linear(thisLayer.effect('Foot with Toes')('Auto-rotate'), 0, 100, (endctrl.effect('Limber')('Clockwise') > 0 ? 90 : 270), (endctrl.effect('Limber')('Clockwise') > 0 ? -90 : 90)) + (endctrl.effect('Limber')('Clockwise') > 0 ? thisLayer.effect('Foot with Toes')('Foot Angle') : -thisLayer.effect('Foot with Toes')('Foot Angle'));",                        "value": "157.408999059992"                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Materials Group",                    "name": "Material Options",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  }                ],                "enabled": true              }            ],            "enabled": true          },          {            "matchName": "ADBE Vector Transform Group",            "name": "Transform",            "type": "NAMED_GROUP",            "properties": [                          ],            "enabled": true          },          {            "matchName": "ADBE Vector Materials Group",            "name": "Material Options",            "type": "NAMED_GROUP",            "properties": [                          ],            "enabled": true          }        ],        "enabled": true      },      {        "matchName": "ADBE Vector Group",        "name": "Admin",        "type": "NAMED_GROUP",        "properties": [          {            "matchName": "ADBE Vectors Group",            "name": "Contents",            "type": "INDEXED_GROUP",            "properties": [                          ],            "enabled": true          },          {            "matchName": "ADBE Vector Transform Group",            "name": "Transform",            "type": "NAMED_GROUP",            "properties": [              {                "matchName": "ADBE Vector Scale",                "name": "Scale",                "type": "PROPERTY",                "enabled": true,                "expression": "////// LIMBER 2.0 //////\nconst limbLayers = {\n\"ankle\": thisComp.layer(\"{{ end }}\"),\n\"hip\": thisComp.layer(\"{{ start }}\"),\n\"leg\": thisComp.layer(\"{{ limb }}\")\n};value;",                "value": "[100,100]"              }            ],            "enabled": true          },          {            "matchName": "ADBE Vector Materials Group",            "name": "Material Options",            "type": "NAMED_GROUP",            "properties": [                          ],            "enabled": true          }        ],        "enabled": false      }    ]  },  "effects": {    "matchName": "ADBE Effect Parade",    "type": "INDEXED_GROUP",    "properties": [      {        "matchName": "Pseudo/skl_limb_footWithTo_03",        "name": "Foot with Toes",        "type": "NAMED_GROUP",        "properties": [          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0001",            "name": "Widths",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0002",            "name": "Start Width",            "type": "PROPERTY",            "enabled": true,            "expression": "",            "value": "110"          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0004",            "name": "End Width",            "type": "PROPERTY",            "enabled": true,            "expression": "",            "value": "125"          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0005",            "name": "Foot with Toes",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0006",            "name": "Colors",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0007",            "name": "Start Color",            "type": "PROPERTY",            "enabled": true,            "expression": "",            "value": "[0.24593470990658,0.58137518167496,0.67504596710205,1]"          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0008",            "name": "Middle Color",            "type": "PROPERTY",            "enabled": true,            "expression": "",            "value": "[0.4190948009491,0.68833327293396,0.7643535733223,1]"          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0009",            "name": "End Color",            "type": "PROPERTY",            "enabled": true,            "expression": "",            "value": "[0.85657167434692,0.67253869771957,0.24312832951546,1]"          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0010",            "name": "Foot with Toes",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0011",            "name": "Splits",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0014",            "name": "Lower Split",            "type": "PROPERTY",            "enabled": true,            "expression": "",            "value": "47"          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0016",            "name": "Foot with Toes",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0017",            "name": "Foot",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0021",            "name": "Tip Width",            "type": "PROPERTY",            "enabled": true,            "expression": "",            "value": "25"          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0022",            "name": "Foot Angle",            "type": "PROPERTY",            "enabled": true,            "expression": "",            "value": "26"          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0023",            "name": "Toe Angle",            "type": "PROPERTY",            "enabled": true,            "expression": "",            "value": "-44"          },          {            "matchName": "Pseudo/skl_limb_footWithTo_03-0025",            "name": "Foot with Toes",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "ADBE Effect Built In Params",            "name": "Compositing Options",            "type": "NAMED_GROUP",            "properties": [              {                "matchName": "ADBE Effect Mask Parade",                "name": "Masks",                "type": "INDEXED_GROUP",                "properties": [                                  ],                "enabled": true              }            ],            "enabled": true          }        ],        "enabled": true      }    ]  },  "transform": {    "matchName": "ADBE Transform Group",    "type": "INDEXED_GROUP",    "properties": [      {        "matchName": "ADBE Anchor Point",        "name": "Anchor Point",        "type": "PROPERTY",        "enabled": true,        "expression": "[0,0];",        "value": "[0,0,0]"      },      {        "matchName": "ADBE Position",        "name": "Position",        "type": "PROPERTY",        "enabled": true,        "expression": "let val = [0,0];\rif (thisLayer.hasParent) {val = thisLayer.parent.fromWorld([0,0,0])};\r[val[0],val[1],0];",        "value": "[0,0,0]"      },      {        "matchName": "ADBE Position_0",        "name": "X Position",        "type": "PROPERTY",        "enabled": true,        "value": "0"      },      {        "matchName": "ADBE Position_1",        "name": "Y Position",        "type": "PROPERTY",        "enabled": true,        "value": "0"      },      {        "matchName": "ADBE Rotate Z",        "name": "Rotation",        "type": "PROPERTY",        "enabled": true,        "expression": "let curlayer = thisLayer; \rconst rot = 0; \rwhile(curlayer.hasParent){rot += curlayer.parent('ADBE Transform Group')('ADBE Rotate Z'); \rcurlayer = curlayer.parent;} -rot;",        "value": "0"      }    ]  }}