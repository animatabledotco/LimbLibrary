{  "shapes": {    "matchName": "ADBE Root Vectors Group",    "type": "INDEXED_GROUP",    "properties": [      {        "matchName": "ADBE Vector Group",        "name": "Limb",        "type": "NAMED_GROUP",        "properties": [          {            "matchName": "ADBE Vectors Group",            "name": "Contents",            "type": "INDEXED_GROUP",            "properties": [              {                "matchName": "ADBE Vector Shape - Group",                "name": "Path",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vector Shape Direction",                    "name": "Shape Direction",                    "type": "PROPERTY",                    "enabled": true,                    "value": "2"                  },                  {                    "matchName": "ADBE Vector Shape",                    "name": "Path",                    "type": "PROPERTY",                    "enabled": true,                    "expression": "function limbPath_3b() {\n        function calcTang(side0, side1, point0, point1, point2, fac, inTan) {\n            const ang1 = Math.atan2(point2[1] - point1[1], point2[0] - point1[0]);\n            const ang0 = Math.atan2(point1[1] - point0[1], point1[0] - point0[0]);\n            const p2relY = point2[1] - point0[1];\n            const p2relX = point2[0] - point0[0];\n            const pointDistance = (p2relX * (point1[1] - point0[1]) - p2relY * (point1[0] - point0[0])) / Math.max(Math.sqrt(p2relX * p2relX + p2relY * p2relY), 0.0001);\n            const perpDist = easeOut(Math.abs(pointDistance), 0, length(point2, point0) / 2, 1, 0);\n            const centDist = easeIn(Math.abs(side0 - side1), 0, length(point0, point2), 0, 1);\n            const tangShorten = 1 - perpDist * centDist;\n            const avang = (ang0 + ang1) / 2;\n            const leng = inTan === true ? length(point0, point1) * fac * tangShorten : length(point1, point2) * fac * tangShorten;\n            const pointSide = Number(((point2[0] - point0[0]) * (point1[1] - point0[1]) - (point2[1] - point0[1]) * (point1[0] - point0[0])).toFixed(2));\n            const flipTang = inTan === true ? (pointSide >= 0 ? 1 : -1) * (Math.sign(Number((ang1 - ang0).toFixed(6))) === 1 ? 1 : -1) : (pointSide <= 0 ? -1 : 1) * (Math.sign(Number((ang0 - ang1).toFixed(6))) === 1 ? 1 : -1);\n            return [Math.cos(avang) * leng * flipTang, Math.sin(avang) * leng * flipTang];\n        }\n        const endctrl = thisComp.layer('{{ end }}');\n        const curveLinArr = mul(endctrl('ADBE Effect Parade')('Pseudo/skl_3bone_data_01')('curvature').value, 0.01);\n        if (curveLinArr[1] === 0 && curveLinArr[2] === 0) {\n            return createPath([\n                endctrl('ADBE Effect Parade')('Pseudo/skl_3bone_data_01')('p0').value,\n                endctrl('ADBE Effect Parade')('Pseudo/skl_3bone_data_01')('p1ikfkfreek').value,\n                endctrl('ADBE Effect Parade')('Pseudo/skl_3bone_data_01')('p2ikfkfreek').value,\n                endctrl('ADBE Effect Parade')('Pseudo/skl_3bone_data_01')('p3ikfkfreek').value,\n            ], [], [], false);\n        }\n        else {\n            const p0 = endctrl('ADBE Effect Parade')('Pseudo/skl_3bone_data_01')('p0').value;\n            const p1ikfkfreek = endctrl('ADBE Effect Parade')('Pseudo/skl_3bone_data_01')('p1ikfkfreek').value;\n            const p2ikfkfreek = endctrl('ADBE Effect Parade')('Pseudo/skl_3bone_data_01')('p2ikfkfreek').value;\n            const p3ikfkfreek = endctrl('ADBE Effect Parade')('Pseudo/skl_3bone_data_01')('p3ikfkfreek').value;\n            const ikfkfreeksides = endctrl('ADBE Effect Parade')('Pseudo/skl_3bone_data_01')('ikfkfreeksides').value;\n            const inTangs = [\n                [0, 0],\n                curveLinArr[1] === 0 ? [0, 0] : calcTang(ikfkfreeksides[0], ikfkfreeksides[1], p0, p1ikfkfreek, p2ikfkfreek, curveLinArr[1], true),\n                curveLinArr[2] === 0 ? [0, 0] : calcTang(ikfkfreeksides[1], ikfkfreeksides[2], p1ikfkfreek, p2ikfkfreek, p3ikfkfreek, curveLinArr[2], true),\n                [0, 0]\n            ];\n            const outTangs = [\n                [0, 0],\n                curveLinArr[1] === 0 ? [0, 0] : calcTang(ikfkfreeksides[1], ikfkfreeksides[0], p0, p1ikfkfreek, p2ikfkfreek, curveLinArr[1], false),\n                curveLinArr[2] === 0 ? [0, 0] : calcTang(ikfkfreeksides[2], ikfkfreeksides[1], p1ikfkfreek, p2ikfkfreek, p3ikfkfreek, curveLinArr[2], false),\n                [0, 0]\n            ];\n            return createPath([p0, p1ikfkfreek, p2ikfkfreek, p3ikfkfreek], inTangs, outTangs, false);\n        }\n    }\nlimbPath_3b();\n// Limber Library limbPath_3b",                    "value": "{\"closed\":false,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,0],[0,0],[0,0],[0,0]],\"outTangents\":[[0,0],[0,0],[0,0],[0,0]],\"vertices\":[[240,150],[339.984069824219,323.214294433594],[165.011962890625,320.089294433594],[240,450]]}"                  }                ],                "enabled": true              },              {                "matchName": "ADBE Vector Filter - RC",                "name": "Round Corners 1",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vector RoundCorner Radius",                    "name": "Radius",                    "type": "PROPERTY",                    "enabled": true,                    "expression": "const ikfkfreeksides = thisComp.layer('{{ end }}').effect('Pseudo/skl_3bone_data_01')('ikfkfreeksides').value;\r(ikfkfreeksides[0] + ikfkfreeksides[1] + ikfkfreeksides[2]) * 0.8333",                    "value": "437.4825"                  }                ],                "enabled": true              },              {                "matchName": "ADBE Vector Graphic - Stroke",                "name": "Stroke",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vector Stroke Color",                    "name": "Color",                    "type": "PROPERTY",                    "enabled": true,                    "expression": "",                    "value": "[0.98823535395604,0.89019613826976,0.0078431372549,1]"                  },                  {                    "matchName": "ADBE Vector Stroke Width",                    "name": "Stroke Width",                    "type": "PROPERTY",                    "enabled": true,                    "expression": "thisProperty.value * thisComp.layer('{{ end }}').effect('Pseudo/skl_3bone_data_01')('scaleFactor').value[0] * thisComp.layer('{{ end }}').effect('Limber')('Width Scale') * 0.01",                    "value": "65"                  },                  {                    "matchName": "ADBE Vector Stroke Line Cap",                    "name": "Line Cap",                    "type": "PROPERTY",                    "enabled": true,                    "value": "2"                  },                  {                    "matchName": "ADBE Vector Stroke Line Join",                    "name": "Line Join",                    "type": "PROPERTY",                    "enabled": true,                    "value": "2"                  },                  {                    "matchName": "ADBE Vector Stroke Dashes",                    "name": "Dashes",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Stroke Taper",                    "name": "Taper",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Stroke Wave",                    "name": "Wave",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  }                ],                "enabled": true              }            ],            "enabled": true          },          {            "matchName": "ADBE Vector Transform Group",            "name": "Transform",            "type": "NAMED_GROUP",            "properties": [                          ],            "enabled": true          },          {            "matchName": "ADBE Vector Materials Group",            "name": "Material Options",            "type": "NAMED_GROUP",            "properties": [                          ],            "enabled": true          }        ],        "enabled": true      },      {        "matchName": "ADBE Vector Group",        "name": "Admin",        "type": "NAMED_GROUP",        "properties": [          {            "matchName": "ADBE Vectors Group",            "name": "Contents",            "type": "INDEXED_GROUP",            "properties": [                          ],            "enabled": true          },          {            "matchName": "ADBE Vector Transform Group",            "name": "Transform",            "type": "NAMED_GROUP",            "properties": [              {                "matchName": "ADBE Vector Scale",                "name": "Scale",                "type": "PROPERTY",                "enabled": true,                "expression": "////// LIMBER 2.0 //////\nvar limbLayers = {\nhip: thisComp.layer('{{ start }}'),\nankle: thisComp.layer('{{ end }}'),\nleg: thisComp.layer('{{ limb }}')\n};value;",                "value": "[100,100]"              }            ],            "enabled": true          },          {            "matchName": "ADBE Vector Materials Group",            "name": "Material Options",            "type": "NAMED_GROUP",            "properties": [                          ],            "enabled": true          }        ],        "enabled": true      }    ]  },  "effects": {    "matchName": "ADBE Effect Parade",    "type": "INDEXED_GROUP",    "properties": [          ]  },  "transform": {    "matchName": "ADBE Transform Group",    "type": "INDEXED_GROUP",    "properties": [      {        "matchName": "ADBE Anchor Point",        "name": "Anchor Point",        "type": "PROPERTY",        "enabled": true,        "expression": "[0,0];",        "value": "[0,0,0]"      },      {        "matchName": "ADBE Position",        "name": "Position",        "type": "PROPERTY",        "enabled": true,        "expression": "let val = [0, 0];\rif (thisLayer.hasParent) {\r\tval = thisLayer.parent.fromWorld([0, 0, 0])\r\t};\r[val[0], val[1], 0];",        "value": "[0,0,0]"      },      {        "matchName": "ADBE Position_0",        "name": "X Position",        "type": "PROPERTY",        "enabled": true,        "value": "0"      },      {        "matchName": "ADBE Position_1",        "name": "Y Position",        "type": "PROPERTY",        "enabled": true,        "value": "0"      },      {        "matchName": "ADBE Scale",        "name": "Scale",        "type": "PROPERTY",        "enabled": true,        "expression": "let val = [100, 100]\rif (thisLayer.hasParent) {\r    const ctrlScaleFactor = Math.max(length(thisLayer.toComp([0,0]), thisLayer.toComp([0.7071,0.7071])), 0.0001);\r    val = [value[0] / ctrlScaleFactor, value[1] / ctrlScaleFactor]\r}\rval",        "value": "[100,100,100]"      },      {        "matchName": "ADBE Rotate Z",        "name": "Rotation",        "type": "PROPERTY",        "enabled": true,        "expression": "let val = 0;\rif (thisLayer.hasParent) {\r    const vec = thisLayer.parent.toWorldVec([1, 0, 0]);\r    val = -radiansToDegrees(Math.atan2(vec[1], vec[0]))\r}\rval",        "value": "0"      }    ]  }}