{  "shapes": {    "matchName": "ADBE Root Vectors Group",    "type": "INDEXED_GROUP",    "properties": [      {        "matchName": "ADBE Vector Group",        "name": "Limb",        "type": "NAMED_GROUP",        "properties": [          {            "matchName": "ADBE Vectors Group",            "name": "Contents",            "type": "INDEXED_GROUP",            "properties": [              {                "matchName": "ADBE Vector Group",                "name": "Upper Group",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vectors Group",                    "name": "Contents",                    "type": "INDEXED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Group",                        "name": "Joint Cap",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Ellipse",                                "name": "C2 Ellipse",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape Direction",                                    "name": "Shape Direction",                                    "type": "PROPERTY",                                    "enabled": true,                                    "value": "2"                                  },                                  {                                    "matchName": "ADBE Vector Ellipse Size",                                    "name": "Size",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "const scaleFacs = thisLayer.content('Admin').content('Scaling Factors').transform.scale[0];\rconst c2 = thisLayer.effect('Shorts and Socks 3D')('Start Width') * scaleFacs;\r[c2, c2]",                                    "value": "[80,80]"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Shape - Rect",                                "name": "Rectangle Path 1",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Rect Size",                                    "name": "Size",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.content('Limb').content('Upper Group').content('Joint Cap').content('C2 Ellipse').size",                                    "value": "[80,80]"                                  },                                  {                                    "matchName": "ADBE Vector Rect Position",                                    "name": "Position",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "[0, - thisLayer.content('Limb').content('Upper Group').content('Joint Cap').content('C2 Ellipse').size[0] * 0.65]",                                    "value": "[0,-52]"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Filter - Merge",                                "name": "Merge Paths 1",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Merge Type",                                    "name": "Mode",                                    "type": "PROPERTY",                                    "enabled": true,                                    "value": "3"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Shorts and Socks 3D')('Shorts Color');",                                    "value": "[0.10588235294118,0.8078431372549,1,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      },                      {                        "matchName": "ADBE Vector Group",                        "name": "Sleeve",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Group",                                "name": "C32 Group",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vectors Group",                                    "name": "Contents",                                    "type": "INDEXED_GROUP",                                    "properties": [                                      {                                        "matchName": "ADBE Vector Shape - Ellipse",                                        "name": "C32",                                        "type": "NAMED_GROUP",                                        "properties": [                                          {                                            "matchName": "ADBE Vector Shape Direction",                                            "name": "Shape Direction",                                            "type": "PROPERTY",                                            "enabled": true,                                            "value": "2"                                          },                                          {                                            "matchName": "ADBE Vector Ellipse Size",                                            "name": "Size",                                            "type": "PROPERTY",                                            "enabled": true,                                            "expression": "const scaleFacs = thisLayer.content('Admin').content('Scaling Factors').transform.scale[0];\rconst lowSplit = thisLayer.effect('Shorts and Socks 3D')('Upper Split') * 0.01;\rconst c32 = (((thisLayer.effect('Shorts and Socks 3D')('Middle Width') + thisLayer.effect('Shorts and Socks 3D')('Sleeve Width Offset')) * lowSplit) + thisLayer.effect('Shorts and Socks 3D')('Start Width') * (1 - lowSplit)) * scaleFacs;\r[c32, c32]",                                            "value": "[85,85]"                                          }                                        ],                                        "enabled": true                                      }                                    ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Transform Group",                                    "name": "Transform",                                    "type": "NAMED_GROUP",                                    "properties": [                                      {                                        "matchName": "ADBE Vector Position",                                        "name": "Position",                                        "type": "PROPERTY",                                        "enabled": true,                                        "expression": "[0, -thisComp.layer('{{ end }}').effect('Pseudo/skl_main_data_01')('ikfkfreeksides').value[0] * (thisLayer.effect('Shorts and Socks 3D')('Upper Split') * 0.01)]",                                        "value": "[0,-100]"                                      },                                      {                                        "matchName": "ADBE Vector Scale",                                        "name": "Scale",                                        "type": "PROPERTY",                                        "enabled": true,                                        "expression": "if (thisLayer.effect('Shorts and Socks 3D')('Upper Rounding') > 0) {\r\t[100, thisLayer.effect('Shorts and Socks 3D')('Upper Rounding')]\r} else {\r\t[0, 0]\r}",                                        "value": "[0,0]"                                      }                                    ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Materials Group",                                    "name": "Material Options",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Group",                                "name": "Wedge Group",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vectors Group",                                    "name": "Contents",                                    "type": "INDEXED_GROUP",                                    "properties": [                                      {                                        "matchName": "ADBE Vector Shape - Group",                                        "name": "Wedge Path",                                        "type": "NAMED_GROUP",                                        "properties": [                                          {                                            "matchName": "ADBE Vector Shape",                                            "name": "Path",                                            "type": "PROPERTY",                                            "enabled": true,                                            "expression": "function quadIn(curtime, intime, outtime, b, c) {\rif (curtime <= intime) {return b}\rif (curtime >= outtime) {return c}\rt = curtime - intime;\rd = outtime - intime;\rc = c-b;\r\treturn c*(t/=d)*t + b;\r}\rconst endctrl = thisComp.layer('{{ end }}');\rconst scaleFacs = thisLayer.content('Admin').content('Scaling Factors').transform.scale[0];\rconst lopers = Math.abs(thisLayer.effect('Shorts and Socks 3D')('Upper Rounding') * 0.01);\rconst s1 = Math.max(endctrl.effect('Pseudo/skl_main_data_01')('ikfkfreeksides').value[0] * (thisLayer.effect('Shorts and Socks 3D')('Upper Split') * 0.01), 1);\rconst c2 = thisLayer.effect('Shorts and Socks 3D')('Start Width') * scaleFacs * 0.5;\rconst c32 = thisProperty.propertyGroup(4)('C32 Group')('Contents')('C32').size[0] * 0.5;\rlet A, r3aold, r3b;\rtry {\r    A = Math.acos(clamp((c2 - c32) / s1, -1, 1));\r    r3aold = [-(c32 * Math.sin(A)), -(s1 + c32 * Math.cos(A))];\r    r3b = [-(c2 * Math.sin(A)), -(c2 * Math.cos(A))];\r} catch (err) {\r    value;\r}\rconst r3a = [quadIn(lopers, 0, 1, -c32, r3aold[0]), quadIn(lopers, 0, 1, -s1, r3aold[1])];\rcreatePath(points = [[0 - r3a[0], r3a[1]], r3a, r3b, [0 - r3b[0], r3b[1]]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], true);",                                            "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,0],[0,0],[0,0],[0,0]],\"outTangents\":[[0,0],[0,0],[0,0],[0,0]],\"vertices\":[[42.497314453125,-99.7848510742188],[-42.497314453125,-99.7848510742188],[-39.9875030517578,1],[39.9875030517578,1]]}"                                          }                                        ],                                        "enabled": true                                      }                                    ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Transform Group",                                    "name": "Transform",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Materials Group",                                    "name": "Material Options",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Filter - Merge",                                "name": "Merge Paths Add",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Merge Type",                                    "name": "Mode",                                    "type": "PROPERTY",                                    "enabled": true,                                    "value": "2"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Group",                                "name": "C32 Group copy",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vectors Group",                                    "name": "Contents",                                    "type": "INDEXED_GROUP",                                    "properties": [                                      {                                        "matchName": "ADBE Vector Shape - Ellipse",                                        "name": "C32",                                        "type": "NAMED_GROUP",                                        "properties": [                                          {                                            "matchName": "ADBE Vector Ellipse Size",                                            "name": "Size",                                            "type": "PROPERTY",                                            "enabled": true,                                            "expression": "thisLayer.content('Limb').content('Upper Group').content('Sleeve').content('C32 Group').content('C32').size",                                            "value": "[85,85]"                                          }                                        ],                                        "enabled": true                                      }                                    ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Transform Group",                                    "name": "Transform",                                    "type": "NAMED_GROUP",                                    "properties": [                                      {                                        "matchName": "ADBE Vector Position",                                        "name": "Position",                                        "type": "PROPERTY",                                        "enabled": true,                                        "expression": "thisLayer.content('Limb').content('Upper Group').content('Sleeve').content('C32 Group').transform.position",                                        "value": "[0,-100]"                                      },                                      {                                        "matchName": "ADBE Vector Scale",                                        "name": "Scale",                                        "type": "PROPERTY",                                        "enabled": true,                                        "expression": "if (thisLayer.effect('Shorts and Socks 3D')('Upper Rounding') < 0) {\r\t[100, thisLayer.effect('Shorts and Socks 3D')('Upper Rounding')]\r} else {\r\t[0, 0]\r}",                                        "value": "[100,-45]"                                      }                                    ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Materials Group",                                    "name": "Material Options",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Filter - Merge",                                "name": "Merge Paths Subtract",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Merge Type",                                    "name": "Mode",                                    "type": "PROPERTY",                                    "enabled": true,                                    "value": "3"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Shorts and Socks 3D')('Shorts Color');",                                    "value": "[0.10588235294118,0.8078431372549,1,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      },                      {                        "matchName": "ADBE Vector Group",                        "name": "Skin",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Taper Path",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape Direction",                                    "name": "Shape Direction",                                    "type": "PROPERTY",                                    "enabled": true,                                    "value": "2"                                  },                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "// lozenge\rfunction midPoint(p1, p2, per) {\r    return [p1[0] + (p2[0] - p1[0]) * per, p1[1] + (p2[1] - p1[1]) * per];\r}\rfunction tangentsAbsolute(vertices, tans) {\r    for (let i = 0, il = vertices.length; i < il; i++) {\r        tans[i] = add(tans[i], vertices[i]);\r    }\r    return tans;\r}\rfunction tangentsRelative(vertices, tans) {\r    for (let i = 0, il = vertices.length; i < il; i++) {\r        tans[i] = sub(tans[i], vertices[i]);\r    }\r    return tans;\r}\rfunction flipX(point) {\r    return [-point[0], point[1]];\r}\r\rfunction flipArrayY (vertices, flipPoint) {\r    for (let i = 0; i < vertices.length; i++) {\r        vertices[i] = [vertices[i][0], flipPoint - (vertices[i][1] - flipPoint)]\r    }\r    return (vertices)\r}\rfunction arrayRotate(arr, count) {\r  const len = arr.length\r  arr.push(...arr.splice(0, (-count % len + len) % len))\r  return arr\r}\rconst endctrl = thisComp.layer('{{ end }}');\rconst scaleFacs = thisLayer.content('Admin').content('Scaling Factors').transform.scale[0];\rconst dist = endctrl.effect('Pseudo/skl_main_data_01')('ikfkfreeksides').value[0]; \rconst circ2 = thisLayer.effect('Shorts and Socks 3D')('Middle Width') * scaleFacs * 0.5; \rconst circ1 = thisLayer.effect('Shorts and Socks 3D')('Start Width') * scaleFacs * 0.5 * (1 - thisLayer.effect('Shorts and Socks 3D')('Skin Taper') * 0.01);\rlet c1, c2;\rif (circ2 < circ1) {\r\tc2 = circ2, c1 = circ1\r\t} else {\r\tc1 = circ2, c2 = circ1\r\t}\rconst A = Math.acos(clamp((c1 - c2) / dist, -1, 1));\rconst fac = 0.5522847498307933;\rconst topSemiVerts = [[c2, -dist], [0, -dist - c2], [-c2, -dist]];\rconst topSemiIns = [[0, 0], [(c2 * fac), 0], [0, -c2 * fac]];\rconst topSemiOuts = [[0, -c2 * fac], [-c2 * fac, 0], [0, 0]];\rconst quad = (0.5 * Math.PI);\rconst t = linear(quad - A, 0, quad, 0, 1);\rconst topSemiInsAbs = tangentsAbsolute(topSemiVerts, topSemiIns);\rconst topSemiOutsAbs = tangentsAbsolute(topSemiVerts, topSemiOuts);\rlet Q0 = midPoint(topSemiVerts[0], topSemiOutsAbs[0], t);\rlet Q1 = midPoint(topSemiOutsAbs[0], topSemiInsAbs[1], t);\rlet Q2 = midPoint(topSemiInsAbs[1], topSemiVerts[1], t);\rlet R0 = midPoint(Q0, Q1, t);\rlet R1 = midPoint(Q1, Q2, t);\rlet S0 = midPoint(R0, R1, t);\rlet newTopSemiVerts = [S0, topSemiVerts[1], [-S0[0], S0[1]]];\rlet newTopSemiIns = tangentsRelative(newTopSemiVerts, [R0, Q2, flipX(R1)]);\rlet newTopSemiOuts = tangentsRelative(newTopSemiVerts, [R1, flipX(Q2), flipX(R0)]);\rconst botSemiVerts = [[c1, 0], [0, -c1], [-c1, 0]];\rconst botSemiIns = [[0, 0], [(c1 * fac), 0], [0, -c1 * fac]];\rconst botSemiOuts = [[0, -c1 * fac], [-c1 * fac, 0], [0, 0]];\rconst remSemiVerts = [[-c1, 0], [0, c1], [c1, 0]];\rconst remSemiIns = tangentsAbsolute(remSemiVerts, [[0, 0], [-(c1 * fac), 0], [0, c1 * fac]]);\rconst remSemiOuts = tangentsAbsolute(remSemiVerts, [[0, c1 * fac], [c1 * fac, 0], [0, 0]]);\rconst botSemiInsAbs = tangentsAbsolute(botSemiVerts, botSemiIns);\rconst botSemiOutsAbs = tangentsAbsolute(botSemiVerts, botSemiOuts);\rQ0 = midPoint(botSemiVerts[0], botSemiOutsAbs[0], t);\rQ1 = midPoint(botSemiOutsAbs[0], botSemiInsAbs[1], t);\rQ2 = midPoint(botSemiInsAbs[1], botSemiVerts[1], t);\rR0 = midPoint(Q0, Q1, t);\rR1 = midPoint(Q1, Q2, t);\rS0 = midPoint(R0, R1, t);\rconst newBotSemiVerts = [flipX(S0), remSemiVerts[0], remSemiVerts[1], remSemiVerts[2], S0]\rconst newBotSemiIns = tangentsRelative(newBotSemiVerts, [flipX(R1), flipX(Q0), remSemiIns[1], remSemiIns[2], R0])\rconst newBotSemiOuts = tangentsRelative(newBotSemiVerts, [flipX(R0), remSemiOuts[0], remSemiOuts[1], Q0, R1])\rnewTopSemiVerts.push(newBotSemiVerts[0], newBotSemiVerts[1], newBotSemiVerts[2], newBotSemiVerts[3], newBotSemiVerts[4]);\rnewTopSemiIns.push(newBotSemiIns[0], newBotSemiIns[1], newBotSemiIns[2], newBotSemiIns[3], newBotSemiIns[4]);\rnewTopSemiOuts.push(newBotSemiOuts[0], newBotSemiOuts[1], newBotSemiOuts[2], newBotSemiOuts[3], newBotSemiOuts[4]);\rlet state;\rif (circ2 < circ1) {\r\tstate = 1;\r\t} else {\r\tstate = 2;\r    newTopSemiVerts = flipArrayY(newTopSemiVerts, -dist * 0.5)\r    newTopSemiIns = flipArrayY(newTopSemiIns, 0)\r    newTopSemiOuts = flipArrayY(newTopSemiOuts, 0)\r}\rcreatePath(newTopSemiVerts, newTopSemiIns, newTopSemiOuts, true)",                                    "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0.01150512695312,0.27850341796875],[10.7643432617188,0],[0.44020080566406,-10.6561889648438],[0.61627197265625,-14.9186706542969],[0,-0.39389038085938],[-15.4639739990234,0],[0,15.4639739990234],[0.01609802246094,0.38992309570312]],\"outTangents\":[[-0.44020080566406,-10.6561889648438],[-10.7643432617188,0],[-0.01150512695312,0.27850341796875],[-0.01611328125,0.38992309570312],[0,15.4639739990234],[15.4639739990234,0],[0,-0.39389038085938],[-0.61628723144531,-14.9186706542969]],\"vertices\":[[19.9826812744141,-200.839874267578],[0,-220],[-19.9826812744141,-200.839874267578],[-27.9757537841797,-1.17581176757812],[-28,0],[0,28],[28,0],[27.9757690429688,-1.17581176757812]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Shorts and Socks 3D')('Skin Color');",                                    "value": "[0.74901960784314,0.54509803921569,0.37647058823529,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      },                      {                        "matchName": "ADBE Vector Group",                        "name": "Sleeve Inner",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Group",                                "name": "Inner",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vectors Group",                                    "name": "Contents",                                    "type": "INDEXED_GROUP",                                    "properties": [                                      {                                        "matchName": "ADBE Vector Shape - Ellipse",                                        "name": "Ellipse Path 1",                                        "type": "NAMED_GROUP",                                        "properties": [                                          {                                            "matchName": "ADBE Vector Ellipse Size",                                            "name": "Size",                                            "type": "PROPERTY",                                            "enabled": true,                                            "expression": "content('Limb').content('Upper Group').content('Sleeve').content('C32 Group').content('C32').size",                                            "value": "[85,85]"                                          }                                        ],                                        "enabled": true                                      }                                    ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Transform Group",                                    "name": "Transform",                                    "type": "NAMED_GROUP",                                    "properties": [                                      {                                        "matchName": "ADBE Vector Position",                                        "name": "Position",                                        "type": "PROPERTY",                                        "enabled": true,                                        "expression": "[0, -thisComp.layer('{{ end }}').effect('Pseudo/skl_main_data_01')('ikfkfreeksides').value[0] * thisLayer.effect('Shorts and Socks 3D')('Upper Split') * 0.01]",                                        "value": "[0,-100]"                                      },                                      {                                        "matchName": "ADBE Vector Scale",                                        "name": "Scale",                                        "type": "PROPERTY",                                        "enabled": true,                                        "expression": "[100, thisLayer.effect('Shorts and Socks 3D')('Upper Rounding')]",                                        "value": "[100,-45]"                                      }                                    ],                                    "enabled": true                                  },                                  {                                    "matchName": "ADBE Vector Materials Group",                                    "name": "Material Options",                                    "type": "NAMED_GROUP",                                    "properties": [                                                                          ],                                    "enabled": true                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Shorts and Socks 3D')('Inner Color');",                                    "value": "[0.59607843137255,0.33725490196078,0.18039215686275,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Transform Group",                    "name": "Transform",                    "type": "NAMED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Position",                        "name": "Position",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "thisComp.layer('{{ end }}')('ADBE Effect Parade')('Pseudo/skl_main_data_01')('p0').value",                        "value": "[240,150]"                      },                      {                        "matchName": "ADBE Vector Rotation",                        "name": "Rotation",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "thisComp.layer('{{ end }}')('ADBE Effect Parade')('Pseudo/skl_main_data_01')('ikfkfreekangles').value[0]",                        "value": "138.590377890729"                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Materials Group",                    "name": "Material Options",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  }                ],                "enabled": true              },              {                "matchName": "ADBE Vector Group",                "name": "Lower Group",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vectors Group",                    "name": "Contents",                    "type": "INDEXED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Group",                        "name": "Proximal Lower",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Taper Path",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "const thisProp = thisProperty;\r        // Limber Taper\r        function midPoint(p1, p2, per) {\r            return [p1[0] + (p2[0] - p1[0]) * per, p1[1] + (p2[1] - p1[1]) * per];\r        }\r        function tangentsAbsolute(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = add(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function tangentsRelative(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = sub(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function flipX(point) {\r            return [-point[0], point[1]];\r        }\r        function flipY(point) {\r            return [point[0], -point[1]];\r        }\r        function flipXY(point) {\r            return [-point[0], -point[1]];\r        }\r        function flipArrayY(vertices, flipPoint) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                vertices[i] = [vertices[i][0], flipPoint * 2 - vertices[i][1]];\r            }\r            return vertices;\r        }\r        function pointAlongY(val, p1, p2) {\r            const linearValue = linear(val, p1[1], p2[1], p1[0], p2[0]);\r            return [linearValue, val];\r        }\r        function xOnCircleGivenY(x, r) {\r            return Math.sqrt(r * r - x * x);\r        }\r        const semiFac = 0.5522847498307933;\r        const quad = 0.5 * Math.PI;\r        const groupName = thisProp.propertyGroup(3).name;\r        const isUpper = groupName.split(' ')[1] === 'Upper';\r        const isProximal = groupName.split(' ')[0] === 'Proximal';\r        const endctrl = thisComp.layer('{{ end }}');\r        const lowerSplitValue = thisLayer.effect('Shorts and Socks 3D')('Lower Split').value * 0.01;\r        const upperSplitValue = thisLayer.effect('Shorts and Socks 3D')('Upper Split').value * 0.01;\r        const lowerRoundingValue = thisLayer.effect('Shorts and Socks 3D')('Lower Rounding').value * 0.01;\r        const upperRoundingValue = thisLayer.effect('Shorts and Socks 3D')('Upper Rounding').value * 0.01;\r        const sides = endctrl.effect('Pseudo/skl_main_data_01')('ikfkfreeksides').value;\r        const widthScale = endctrl.effect('Pseudo/skl_main_05')('Width Scale').value * 0.01;\r        const scaleFactor = endctrl.effect('Pseudo/skl_main_data_01')('scaleFactor').value[0];\r        const s1 = thisLayer.effect('Shorts and Socks 3D')('Start Width').value * widthScale * scaleFactor;\r        const s3 = thisLayer.effect('Shorts and Socks 3D')('End Width').value * widthScale * scaleFactor;\r        const s2 = thisLayer.effect('Shorts and Socks 3D')('Middle Width').value * widthScale * scaleFactor;\r\t\tlet c1, c2, dist;\r        if (isUpper) {\r            c2 = s2;\r            c1 = s1;\r            dist = sides[0];\r        }\r        else {\r            c1 = s2;\r            c2 = s3;\r            dist = sides[1];\r        }\r        const distrad = c2 * 0.5;\r        const proxrad = c1 * 0.5;\r        let pers = -lowerRoundingValue;\r        let splitY = isProximal ? lowerSplitValue : 1 - lowerSplitValue;\r        if (isUpper) {\r            pers = -upperRoundingValue;\r            splitY = isProximal ? upperSplitValue : 1 - upperSplitValue;\r        }\r        splitY = -dist * splitY - 0.5;\r        const rad1 = Math.round((isProximal ? proxrad : distrad) * 100000) / 100000;\r        const rad2 = Math.round((isProximal ? distrad : proxrad) * 100000) / 100000;\r        const A = Math.acos(clamp((rad2 - rad1) / dist, -1, 1));\r        const r3a = [rad2 * Math.sin(A), -(dist - rad2 * Math.cos(A))];\r        const r3b = [rad1 * Math.sin(A), rad1 * Math.cos(A)];\r        const semiVerts = [\r            [rad1, 0],\r            [0, rad1],\r            [-rad1, 0],\r        ];\r        const semiIns = tangentsAbsolute(semiVerts, [\r            [0, 0],\r            [rad1 * semiFac, 0],\r            [0, rad1 * semiFac],\r        ]);\r        const semiOuts = tangentsAbsolute(semiVerts, [\r            [0, rad1 * semiFac],\r            [-rad1 * semiFac, 0],\r            [0, 0],\r        ]);\r\t\tlet newVerts, newIns, newOuts, state, newA, newT,nq0, nq1, nq2, nr0, nr1, ns0, t, q0, q1, q2, r0, r1, s0, v4, v6, uq0, uq1, uq2, ur0, ur1, us0, upA, upT;\r        if (rad2 < rad1) {\r            if (splitY > r3b[1]) {\r                state = 1;\r                newA = -Math.atan2(splitY, xOnCircleGivenY(splitY, rad1));\r                newT = newA / quad;\r                nq0 = midPoint(semiVerts[0], semiOuts[0], newT);\r                nq1 = midPoint(semiOuts[0], semiIns[1], newT);\r                nq2 = midPoint(semiIns[1], semiVerts[1], newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[0], semiVerts[1], semiVerts[2], flipXY(ns0), [0, splitY], flipY(ns0), flipY(ns0)];\r                newIns = tangentsRelative(newVerts, [\r                    flipY(nq0),\r                    semiVerts[0],\r                    semiIns[1],\r                    semiIns[2],\r                    flipXY(nr0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(ns0),\r                ]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiVerts[0],\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(nq0),\r                    flipXY(ns0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(nr0),\r                ]);\r            }\r            else {\r                state = 2;\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                v4 = flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[1], semiVerts[2], flipXY(s0), v4, [0, splitY], v6, flipY(s0)];\r                newIns = tangentsRelative(newVerts, [flipY(q0), semiIns[1], semiIns[2], flipXY(r0), v4, [0, splitY], v6, flipY(s0)]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(q0),\r                    flipXY(s0),\r                    v4,\r                    [0, splitY],\r                    v6,\r                    flipY(r0),\r                ]);\r            }\r        }\r        else {\r            if (splitY < r3a[1]) {\r                state = 3;\r                const UpsemiVerts = [\r                    [rad2, -dist],\r                    [0, -(dist - rad2)],\r                    [-rad2, -dist],\r                ];\r                const UpsemiIns = tangentsAbsolute(UpsemiVerts, [\r                    [0, 0],\r                    [rad2 * semiFac, 0],\r                    [0, rad2 * semiFac],\r                ]);\r                const UpsemiOuts = tangentsAbsolute(UpsemiVerts, [\r                    [0, rad2 * semiFac],\r                    [-rad2 * semiFac, 0],\r                    [0, 0],\r                ]);\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                if (rad2 == rad1) {\r                    upA = 0.00001;\r                }\r                else {\r                    upA = quad - Math.acos(clamp((rad2 - rad1) / dist, -1, 1));\r                }\r                upT = upA / quad;\r                uq0 = midPoint(UpsemiVerts[0], UpsemiOuts[0], upT);\r                uq1 = midPoint(UpsemiOuts[0], UpsemiIns[1], upT);\r                uq2 = midPoint(UpsemiIns[1], UpsemiVerts[1], upT);\r                ur0 = midPoint(uq0, uq1, upT);\r                ur1 = midPoint(uq1, uq2, upT);\r                us0 = midPoint(ur0, ur1, upT);\r                newA = -Math.atan2(-dist - splitY, xOnCircleGivenY(-dist - splitY, rad2));\r                newT = newA / upA;\r                nq0 = midPoint(UpsemiVerts[0], uq0, newT);\r                nq1 = midPoint(uq0, ur0, newT);\r                nq2 = midPoint(ur0, us0, newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                newVerts = [s0, semiVerts[1], flipX(s0), flipX(r3a), flipX(ns0), [0, splitY], ns0, us0];\r                newIns = tangentsRelative(newVerts, [s0, q2, flipX(r1), flipX(r3a), flipX(nr1), [0, splitY], ns0, us0]);\r                newOuts = tangentsRelative(newVerts, [r1, flipX(q2), flipX(r0), flipX(nq2), flipX(ns0), [0, splitY], nr1, r3a]);\r            }\r            else {\r                state = 4;\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, s0);\r                v4 = flipX(v6);\r                newVerts = [s0, s0, semiVerts[1], flipX(s0), v4, [0, splitY], v6, v6];\r                newIns = tangentsRelative(newVerts, [s0, s0, q2, flipX(r1), v4, [0, splitY], v6, v6]);\r                newOuts = tangentsRelative(newVerts, [s0, r1, flipX(q2), flipX(r0), v4, [0, splitY], v6, r0]);\r            }\r        }\r        if (isProximal != true) {\r            const tempVerts = newVerts;\r            const tempIns = newIns;\r            const tempOuts = newOuts;\r            newVerts = flipArrayY(tempVerts, -dist * 0.5).reverse();\r            newIns = flipArrayY(tempOuts, 0).reverse();\r            newOuts = flipArrayY(tempIns, 0).reverse();\r        }\r        if (pers != 0) {\r\t\t\tlet pVert, newVertAdd;\r\t\t\tif (isProximal) {\r\t\t\t\tpVert = 5;\r\t\t\t\tnewVertAdd = [0, newVerts[pVert + 1][0] * pers];\r\t\t\t} else {\r\t\t\t\tpVert = 2;\r\t\t\t\tnewVertAdd = [0, -newVerts[pVert + 1][0] * pers];\r\t\t\t}\t\t\t\r            newVerts[pVert] = add(newVerts[pVert], newVertAdd);\r            newIns[pVert] = [-newVerts[pVert + 1][0] * semiFac, 0];\r            newOuts[pVert] = [newVerts[pVert + 1][0] * semiFac, 0];\r            const B = isProximal ? Math.PI * 0.5 - A : -(Math.PI * 0.5 + A);\r            const temp6 = newVerts[pVert + 1][0] * semiFac * pers;\r            newIns[pVert + 1][0] = -temp6 * Math.sin(B);\r            newIns[pVert + 1][1] = temp6 * Math.cos(B);\r            const temp4 = newVerts[pVert + 1][0] * semiFac * pers;\r            newOuts[pVert - 1][0] = -temp4 * Math.sin(-B);\r            newOuts[pVert - 1][1] = temp4 * Math.cos(-B);\r        }\r        createPath(newVerts, newIns, newOuts, true);",                                    "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[0,-0.17581176757812],[11.0457000732422,0],[0,11.0457000732422],[-0.00450134277344,0.17472839355469],[0,0],[-8.97055053710938,0],[-0.16819763183594,-6.72579956054688],[0,0]],\"outTangents\":[[0,11.0457000732422],[-11.0457000732422,0],[0,-0.17581176757812],[0,0],[0.16819763183594,-6.72579956054688],[8.97053527832031,0],[0,0],[0.00450134277344,0.17472839355469]],\"vertices\":[[20,0],[0,20],[-20,0],[-19.9932250976562,-0.52583312988281],[-16.2426147460938,-150.5],[0,-162.681976318359],[16.2426147460938,-150.5],[19.9932250976562,-0.52583312988281]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Shorts and Socks 3D')('Skin Color');",                                    "value": "[0.74901960784314,0.54509803921569,0.37647058823529,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      },                      {                        "matchName": "ADBE Vector Group",                        "name": "Distal Lower",                        "type": "NAMED_GROUP",                        "properties": [                          {                            "matchName": "ADBE Vectors Group",                            "name": "Contents",                            "type": "INDEXED_GROUP",                            "properties": [                              {                                "matchName": "ADBE Vector Shape - Group",                                "name": "Taper Path",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Shape Direction",                                    "name": "Shape Direction",                                    "type": "PROPERTY",                                    "enabled": true,                                    "value": "2"                                  },                                  {                                    "matchName": "ADBE Vector Shape",                                    "name": "Path",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "const thisProp = thisProperty;\r        // Limber Taper\r        function midPoint(p1, p2, per) {\r            return [p1[0] + (p2[0] - p1[0]) * per, p1[1] + (p2[1] - p1[1]) * per];\r        }\r        function tangentsAbsolute(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = add(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function tangentsRelative(vertices, tans) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                tans[i] = sub(tans[i], vertices[i]);\r            }\r            return tans;\r        }\r        function flipX(point) {\r            return [-point[0], point[1]];\r        }\r        function flipY(point) {\r            return [point[0], -point[1]];\r        }\r        function flipXY(point) {\r            return [-point[0], -point[1]];\r        }\r        function flipArrayY(vertices, flipPoint) {\r            for (let i = 0, il = vertices.length; i < il; i++) {\r                vertices[i] = [vertices[i][0], flipPoint * 2 - vertices[i][1]];\r            }\r            return vertices;\r        }\r        function pointAlongY(val, p1, p2) {\r            const linearValue = linear(val, p1[1], p2[1], p1[0], p2[0]);\r            return [linearValue, val];\r        }\r        function xOnCircleGivenY(x, r) {\r            return Math.sqrt(r * r - x * x);\r        }\r        const semiFac = 0.5522847498307933;\r        const quad = 0.5 * Math.PI;\r        const groupName = thisProp.propertyGroup(3).name;\r        const isUpper = groupName.split(' ')[1] === 'Upper';\r        const isProximal = groupName.split(' ')[0] === 'Proximal';\r        const endctrl = thisComp.layer('{{ end }}');\r        const lowerSplitValue = thisLayer.effect('Shorts and Socks 3D')('Lower Split').value * 0.01;\r        const upperSplitValue = thisLayer.effect('Shorts and Socks 3D')('Upper Split').value * 0.01;\r        const lowerRoundingValue = thisLayer.effect('Shorts and Socks 3D')('Lower Rounding').value * 0.01;\r        const upperRoundingValue = thisLayer.effect('Shorts and Socks 3D')('Upper Rounding').value * 0.01;\r        const sides = endctrl.effect('Pseudo/skl_main_data_01')('ikfkfreeksides').value;\r        const widthScale = endctrl.effect('Pseudo/skl_main_05')('Width Scale').value * 0.01;\r        const scaleFactor = endctrl.effect('Pseudo/skl_main_data_01')('scaleFactor').value[0];\r        const s1 = thisLayer.effect('Shorts and Socks 3D')('Start Width').value * widthScale * scaleFactor;\r        const s3 = thisLayer.effect('Shorts and Socks 3D')('End Width').value * widthScale * scaleFactor;\r        const s2 = thisLayer.effect('Shorts and Socks 3D')('Middle Width').value * widthScale * scaleFactor;\r\t\tlet c1, c2, dist;\r        if (isUpper) {\r            c2 = s2;\r            c1 = s1;\r            dist = sides[0];\r        }\r        else {\r            c1 = s2;\r            c2 = s3;\r            dist = sides[1];\r        }\r        const distrad = c2 * 0.5;\r        const proxrad = c1 * 0.5;\r        let pers = -lowerRoundingValue;\r        let splitY = isProximal ? lowerSplitValue : 1 - lowerSplitValue;\r        if (isUpper) {\r            pers = -upperRoundingValue;\r            splitY = isProximal ? upperSplitValue : 1 - upperSplitValue;\r        }\r        splitY = -dist * splitY - 0.5;\r        const rad1 = Math.round((isProximal ? proxrad : distrad) * 100000) / 100000;\r        const rad2 = Math.round((isProximal ? distrad : proxrad) * 100000) / 100000;\r        const A = Math.acos(clamp((rad2 - rad1) / dist, -1, 1));\r        const r3a = [rad2 * Math.sin(A), -(dist - rad2 * Math.cos(A))];\r        const r3b = [rad1 * Math.sin(A), rad1 * Math.cos(A)];\r        const semiVerts = [\r            [rad1, 0],\r            [0, rad1],\r            [-rad1, 0],\r        ];\r        const semiIns = tangentsAbsolute(semiVerts, [\r            [0, 0],\r            [rad1 * semiFac, 0],\r            [0, rad1 * semiFac],\r        ]);\r        const semiOuts = tangentsAbsolute(semiVerts, [\r            [0, rad1 * semiFac],\r            [-rad1 * semiFac, 0],\r            [0, 0],\r        ]);\r\t\tlet newVerts, newIns, newOuts, state, newA, newT,nq0, nq1, nq2, nr0, nr1, ns0, t, q0, q1, q2, r0, r1, s0, v4, v6, uq0, uq1, uq2, ur0, ur1, us0, upA, upT;\r        if (rad2 < rad1) {\r            if (splitY > r3b[1]) {\r                state = 1;\r                newA = -Math.atan2(splitY, xOnCircleGivenY(splitY, rad1));\r                newT = newA / quad;\r                nq0 = midPoint(semiVerts[0], semiOuts[0], newT);\r                nq1 = midPoint(semiOuts[0], semiIns[1], newT);\r                nq2 = midPoint(semiIns[1], semiVerts[1], newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[0], semiVerts[1], semiVerts[2], flipXY(ns0), [0, splitY], flipY(ns0), flipY(ns0)];\r                newIns = tangentsRelative(newVerts, [\r                    flipY(nq0),\r                    semiVerts[0],\r                    semiIns[1],\r                    semiIns[2],\r                    flipXY(nr0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(ns0),\r                ]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiVerts[0],\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(nq0),\r                    flipXY(ns0),\r                    [0, splitY],\r                    flipY(ns0),\r                    flipY(nr0),\r                ]);\r            }\r            else {\r                state = 2;\r                t = (A - quad) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, flipY(s0));\r                v4 = flipX(v6);\r                newVerts = [semiVerts[0], semiVerts[1], semiVerts[2], flipXY(s0), v4, [0, splitY], v6, flipY(s0)];\r                newIns = tangentsRelative(newVerts, [flipY(q0), semiIns[1], semiIns[2], flipXY(r0), v4, [0, splitY], v6, flipY(s0)]);\r                newOuts = tangentsRelative(newVerts, [\r                    semiOuts[0],\r                    semiOuts[1],\r                    flipXY(q0),\r                    flipXY(s0),\r                    v4,\r                    [0, splitY],\r                    v6,\r                    flipY(r0),\r                ]);\r            }\r        }\r        else {\r            if (splitY < r3a[1]) {\r                state = 3;\r                const UpsemiVerts = [\r                    [rad2, -dist],\r                    [0, -(dist - rad2)],\r                    [-rad2, -dist],\r                ];\r                const UpsemiIns = tangentsAbsolute(UpsemiVerts, [\r                    [0, 0],\r                    [rad2 * semiFac, 0],\r                    [0, rad2 * semiFac],\r                ]);\r                const UpsemiOuts = tangentsAbsolute(UpsemiVerts, [\r                    [0, rad2 * semiFac],\r                    [-rad2 * semiFac, 0],\r                    [0, 0],\r                ]);\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                if (rad2 == rad1) {\r                    upA = 0.00001;\r                }\r                else {\r                    upA = quad - Math.acos(clamp((rad2 - rad1) / dist, -1, 1));\r                }\r                upT = upA / quad;\r                uq0 = midPoint(UpsemiVerts[0], UpsemiOuts[0], upT);\r                uq1 = midPoint(UpsemiOuts[0], UpsemiIns[1], upT);\r                uq2 = midPoint(UpsemiIns[1], UpsemiVerts[1], upT);\r                ur0 = midPoint(uq0, uq1, upT);\r                ur1 = midPoint(uq1, uq2, upT);\r                us0 = midPoint(ur0, ur1, upT);\r                newA = -Math.atan2(-dist - splitY, xOnCircleGivenY(-dist - splitY, rad2));\r                newT = newA / upA;\r                nq0 = midPoint(UpsemiVerts[0], uq0, newT);\r                nq1 = midPoint(uq0, ur0, newT);\r                nq2 = midPoint(ur0, us0, newT);\r                nr0 = midPoint(nq0, nq1, newT);\r                nr1 = midPoint(nq1, nq2, newT);\r                ns0 = midPoint(nr0, nr1, newT);\r                newVerts = [s0, semiVerts[1], flipX(s0), flipX(r3a), flipX(ns0), [0, splitY], ns0, us0];\r                newIns = tangentsRelative(newVerts, [s0, q2, flipX(r1), flipX(r3a), flipX(nr1), [0, splitY], ns0, us0]);\r                newOuts = tangentsRelative(newVerts, [r1, flipX(q2), flipX(r0), flipX(nq2), flipX(ns0), [0, splitY], nr1, r3a]);\r            }\r            else {\r                state = 4;\r                t = (quad - A) / quad;\r                q0 = midPoint(semiVerts[0], semiOuts[0], t);\r                q1 = midPoint(semiOuts[0], semiIns[1], t);\r                q2 = midPoint(semiIns[1], semiVerts[1], t);\r                r0 = midPoint(q0, q1, t);\r                r1 = midPoint(q1, q2, t);\r                s0 = midPoint(r0, r1, t);\r                v6 = pointAlongY(splitY, r3a, s0);\r                v4 = flipX(v6);\r                newVerts = [s0, s0, semiVerts[1], flipX(s0), v4, [0, splitY], v6, v6];\r                newIns = tangentsRelative(newVerts, [s0, s0, q2, flipX(r1), v4, [0, splitY], v6, v6]);\r                newOuts = tangentsRelative(newVerts, [s0, r1, flipX(q2), flipX(r0), v4, [0, splitY], v6, r0]);\r            }\r        }\r        if (isProximal != true) {\r            const tempVerts = newVerts;\r            const tempIns = newIns;\r            const tempOuts = newOuts;\r            newVerts = flipArrayY(tempVerts, -dist * 0.5).reverse();\r            newIns = flipArrayY(tempOuts, 0).reverse();\r            newOuts = flipArrayY(tempIns, 0).reverse();\r        }\r        if (pers != 0) {\r\t\t\tlet pVert, newVertAdd;\r\t\t\tif (isProximal) {\r\t\t\t\tpVert = 5;\r\t\t\t\tnewVertAdd = [0, newVerts[pVert + 1][0] * pers];\r\t\t\t} else {\r\t\t\t\tpVert = 2;\r\t\t\t\tnewVertAdd = [0, -newVerts[pVert + 1][0] * pers];\r\t\t\t}\t\t\t\r            newVerts[pVert] = add(newVerts[pVert], newVertAdd);\r            newIns[pVert] = [-newVerts[pVert + 1][0] * semiFac, 0];\r            newOuts[pVert] = [newVerts[pVert + 1][0] * semiFac, 0];\r            const B = isProximal ? Math.PI * 0.5 - A : -(Math.PI * 0.5 + A);\r            const temp6 = newVerts[pVert + 1][0] * semiFac * pers;\r            newIns[pVert + 1][0] = -temp6 * Math.sin(B);\r            newIns[pVert + 1][1] = temp6 * Math.cos(B);\r            const temp4 = newVerts[pVert + 1][0] * semiFac * pers;\r            newOuts[pVert - 1][0] = -temp4 * Math.sin(-B);\r            newOuts[pVert - 1][1] = temp4 * Math.cos(-B);\r        }\r        createPath(newVerts, newIns, newOuts, true);",                                    "value": "{\"closed\":true,\"featherInterps\":[\n\n],\"featherRadii\":[\n\n],\"featherRelCornerAngles\":[\n\n],\"featherRelSegLocs\":[\n\n],\"featherSegLocs\":[\n\n],\"featherTensions\":[\n\n],\"featherTypes\":[\n\n],\"inTangents\":[[-1.26934814453125,-50.7633361816406],[0,0],[8.984375,0],[0.16845703125,-6.73617553710938],[-0.00337219238281,0.13104248046875],[-8.15240478515625,0],[-0.2091064453125,-8.10198974609375],[0,0]],\"outTangents\":[[0,0],[-0.16845703125,-6.73617553710938],[-8.984375,0],[0,0],[0.2091064453125,-8.10198974609375],[8.15240478515625,0],[0,0],[0,0]],\"vertices\":[[16.2676544189453,-149.5],[16.2676544189453,-149.5],[0,-161.700744628906],[-16.2676544189453,-149.5],[-14.9949188232422,-200.394378662109],[0,-215],[14.9949188232422,-200.394378662109],[14.9949188232422,-200.394378662109]]}"                                  }                                ],                                "enabled": true                              },                              {                                "matchName": "ADBE Vector Graphic - Fill",                                "name": "Fill",                                "type": "NAMED_GROUP",                                "properties": [                                  {                                    "matchName": "ADBE Vector Fill Color",                                    "name": "Color",                                    "type": "PROPERTY",                                    "enabled": true,                                    "expression": "thisLayer.effect('Shorts and Socks 3D')('Sock Color');",                                    "value": "[0.99607843137255,0,0.58823529411765,1]"                                  }                                ],                                "enabled": true                              }                            ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Transform Group",                            "name": "Transform",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          },                          {                            "matchName": "ADBE Vector Materials Group",                            "name": "Material Options",                            "type": "NAMED_GROUP",                            "properties": [                                                          ],                            "enabled": true                          }                        ],                        "enabled": true                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Transform Group",                    "name": "Transform",                    "type": "NAMED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Position",                        "name": "Position",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "thisComp.layer('{{ end }}').effect('Pseudo/skl_main_data_01')('p1ikfkfreek').value",                        "value": "[372.28756555323,300]"                      },                      {                        "matchName": "ADBE Vector Rotation",                        "name": "Rotation",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "thisComp.layer('{{ end }}').effect('Pseudo/skl_main_data_01')('ikfkfreekangles').value[1]",                        "value": "221.409622109271"                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Materials Group",                    "name": "Material Options",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  }                ],                "enabled": true              }            ],            "enabled": true          },          {            "matchName": "ADBE Vector Transform Group",            "name": "Transform",            "type": "NAMED_GROUP",            "properties": [                          ],            "enabled": true          },          {            "matchName": "ADBE Vector Materials Group",            "name": "Material Options",            "type": "NAMED_GROUP",            "properties": [                          ],            "enabled": true          }        ],        "enabled": true      },      {        "matchName": "ADBE Vector Group",        "name": "Admin",        "type": "NAMED_GROUP",        "properties": [          {            "matchName": "ADBE Vectors Group",            "name": "Contents",            "type": "INDEXED_GROUP",            "properties": [              {                "matchName": "ADBE Vector Group",                "name": "Scaling Factors",                "type": "NAMED_GROUP",                "properties": [                  {                    "matchName": "ADBE Vectors Group",                    "name": "Contents",                    "type": "INDEXED_GROUP",                    "properties": [                                          ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Transform Group",                    "name": "Transform",                    "type": "NAMED_GROUP",                    "properties": [                      {                        "matchName": "ADBE Vector Scale",                        "name": "Scale",                        "type": "PROPERTY",                        "enabled": true,                        "expression": "[thisComp.layer('{{ end }}').effect('Pseudo/skl_main_data_01')('scaleFactor').value[0] * thisComp.layer('{{ end }}').effect('Limber')('Width Scale') * 0.01, 0]",                        "value": "[1,0]"                      }                    ],                    "enabled": true                  },                  {                    "matchName": "ADBE Vector Materials Group",                    "name": "Material Options",                    "type": "NAMED_GROUP",                    "properties": [                                          ],                    "enabled": true                  }                ],                "enabled": true              }            ],            "enabled": true          },          {            "matchName": "ADBE Vector Transform Group",            "name": "Transform",            "type": "NAMED_GROUP",            "properties": [              {                "matchName": "ADBE Vector Scale",                "name": "Scale",                "type": "PROPERTY",                "enabled": true,                "expression": "////// LIMBER 2.0 //////\nvar limbLayers = {\nhip: thisComp.layer('{{ start }}'),\nankle: thisComp.layer('{{ end }}'),\nleg: thisComp.layer('{{ limb }}')\n};value;",                "value": "[100,100]"              }            ],            "enabled": true          },          {            "matchName": "ADBE Vector Materials Group",            "name": "Material Options",            "type": "NAMED_GROUP",            "properties": [                          ],            "enabled": true          }        ],        "enabled": true      }    ]  },  "effects": {    "matchName": "ADBE Effect Parade",    "type": "INDEXED_GROUP",    "properties": [      {        "matchName": "Pseudo/skl_limb_shortsAnd3d_01",        "name": "Shorts and Socks 3D",        "type": "NAMED_GROUP",        "properties": [          {            "matchName": "Pseudo/skl_limb_shortsAnd3d_01-0001",            "name": "Widths",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_shortsAnd3d_01-0007",            "name": "Shorts and Socks 3D",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_shortsAnd3d_01-0008",            "name": "Colors",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_shortsAnd3d_01-0013",            "name": "Shorts and Socks 3D",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_shortsAnd3d_01-0014",            "name": "Split",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "Pseudo/skl_limb_shortsAnd3d_01-0019",            "name": "Shorts and Socks 3D",            "type": "PROPERTY",            "enabled": true          },          {            "matchName": "ADBE Effect Built In Params",            "name": "Compositing Options",            "type": "NAMED_GROUP",            "properties": [              {                "matchName": "ADBE Effect Mask Parade",                "name": "Masks",                "type": "INDEXED_GROUP",                "properties": [                                  ],                "enabled": true              }            ],            "enabled": true          }        ],        "enabled": true      }    ]  },  "transform": {    "matchName": "ADBE Transform Group",    "type": "INDEXED_GROUP",    "properties": [      {        "matchName": "ADBE Anchor Point",        "name": "Anchor Point",        "type": "PROPERTY",        "enabled": true,        "expression": "[0,0];",        "value": "[0,0,0]"      },      {        "matchName": "ADBE Position",        "name": "Position",        "type": "PROPERTY",        "enabled": true,        "expression": "let val = [0,0];\rif (thisLayer.hasParent) {val = thisLayer.parent.fromWorld([0,0,0])};\r[val[0],val[1],0];",        "value": "[0,0,0]"      },      {        "matchName": "ADBE Position_0",        "name": "X Position",        "type": "PROPERTY",        "enabled": true,        "value": "0"      },      {        "matchName": "ADBE Position_1",        "name": "Y Position",        "type": "PROPERTY",        "enabled": true,        "value": "0"      },      {        "matchName": "ADBE Scale",        "name": "Scale",        "type": "PROPERTY",        "enabled": true,        "expression": "let val = [100, 100]\rif (thisLayer.hasParent) {\r    const ctrlScaleFactor = Math.max(thisLayer.length(thisLayer.toComp([0, 0]), thisLayer.toComp([0.7071, 0.7071])), 0.0001);\r    val = [value[0] / ctrlScaleFactor, value[1] / ctrlScaleFactor]\r}\rval",        "value": "[100,100,100]"      }    ]  }}